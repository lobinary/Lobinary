<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">
   
    <http pattern="/forklift*" security="none" ></http> 
    <http pattern="/index.jsp" security="none" ></http>
    <http pattern="/login.html" security="none" ></http>
    <http pattern="/login!faile.action" security="none" ></http>
    <http pattern="/login!success.action" security="none" ></http>
    <http pattern="/login!validatecaptcha.action" security="none" ></http>
    <http pattern="/login!register.action" security="none" ></http>
    <http pattern="/get.captcha" security="none" ></http>
    <http pattern="/resources/**" security="none" ></http>
	<http auto-config="true"  access-denied-page="/403.html" ><!-- 当访问被拒绝时，会转到403.html -->
		<form-login login-page="/login.html"
			authentication-failure-handler-ref="loginAuthenticationFailureHandler"
			authentication-success-handler-ref="loginAuthenticationSuccessHandler"
			default-target-url="/login!success.action"
			login-processing-url="/j_spring_security_check" 
			username-parameter="j_username" 
			password-parameter="j_password" 
			always-use-default-target="true"
			 />
		<logout logout-success-url="/login.html" logout-url="/j_spring_security_logout"/>
		<http-basic />
		<!-- 自己配置登录的过滤器 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="loginFilter" />
		 <session-management session-fixation-protection="none">  <!--  此属性防止复制带有session参数的恶意访问 -->
			<!--  最多允许一个终端登录此id，第二个属性代表，如果超出最大数，则弹出错误（true）还是自动挤掉第一个登录（false） -->
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="false" />
		</session-management> 
	</http>

	<!-- * 具体实现大概步骤： * 1.定义自己的Filter； * 2.定义自己的SecurityMetadataSource，获取与需要保护的安全对象关联的属性； 
		* 3.定义自己的AuthenticationProvider，设置用户的授权信息，在本实验中，因为采用的是数据库的方式来存储用户数据，所以不打算自定义Provider，而是基于其具体实现DaoAuthenticationProvider的用户授权数据获取方式，实现userDetailsService接口，从数据库中加载自己的用户数据； 
		* 4.定义自己的AccessDecisionManager； * * 真实的执行顺序 * 1.filter初始化 * 2.SecurityMetadataSource初始化，装载URL与ROLE的对应关系 
		* 3.用户访问网页 * 4.AuthenticationManager根据URL生成需要的ROLE级别 * 5.获取用户的ROLE级别 * 6.通过AccessDecisionManager来判断两个URL的ROLE中是否有用户的ROLE，如果没有返回403 
		* -->
	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="loginFilter" class="com.boce.cms.security.LoginFilterSecurityInterceptor" >
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="loginAccessDecisionManagerBean" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>
	<!-- 登录成功处理-->
	<beans:bean id="loginAuthenticationSuccessHandler" class="com.boce.cms.security.LoginAuthenticationSuccessHandler" />
	<!-- 登录失败处理 -->
	<beans:bean id="loginAuthenticationFailureHandler" class="com.boce.cms.security.LoginAuthenticationFailureHandler" />
	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource" class="com.boce.cms.security.LoginInvocationSecurityMetadataSource" />
	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider  user-service-ref="lobinaryUserDetailService" >
			<password-encoder ref="lobinaryPasswordEncoder"></password-encoder>
		</authentication-provider>
	</authentication-manager>
	<beans:bean id="lobinaryUserDetailService" class="com.boce.cms.security.LobinaryUserDetailService" />
	<beans:bean id="lobinaryPasswordEncoder" class="com.boce.cms.security.LobinaryPasswordEncoder" />

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="loginAccessDecisionManagerBean" class="com.boce.cms.security.LoginAccessDecisionManager" />

	<!-- 管理方法安全调用 方法加注释@PreAuthorize("isAnonymous()") 或者@PreAuthorize("hasAuthority('ROLE_TELLER')") 
	<global-method-security   pre-post-annotations="enabled">
		<protect-pointcut access="ROLE_USER"
			expression="execution(* com.boce..*Service.*(..))" />
	</global-method-security>
	-->
</beans:beans>