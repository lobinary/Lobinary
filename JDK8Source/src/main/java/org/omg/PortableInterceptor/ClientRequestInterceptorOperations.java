/***** Lobxxx Translate Finished ******/
package org.omg.PortableInterceptor;


/**
* org/omg/PortableInterceptor/ClientRequestInterceptorOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u45/3627/corba/src/share/classes/org/omg/PortableInterceptor/Interceptors.idl
* Thursday, April 30, 2015 12:42:09 PM PDT
*/


/**
   * Client-side request interceptor.
   * <p>
   * A request Interceptor is designed to intercept the flow of a 
   * request/reply sequence through the ORB at specific points so that 
   * services can query the request information and manipulate the service 
   * contexts which are propagated between clients and servers. The primary 
   * use of request Interceptors is to enable ORB services to transfer 
   * context information between clients and servers. There are two types 
   * of request Interceptors: client-side and server-side. 
   * <p>
   * To write a client-side Interceptor, implement the 
   * <code>ClientRequestInterceptor</code> interface. 
   *
   * <p>
   *  客户端请求拦截器。
   * <p>
   *  请求拦截器被设计为在特定点处通过ORB截取请求/应答序列的流,使得服务可以查询请求信息并操纵在客户端和服务器之间传播的服务上下文。
   * 请求拦截器的主要用途是使ORB服务能够在客户端和服务器之间传递上下文信息。有两种类型的请求拦截器：客户端和服务器端。
   * <p>
   *  要编写客户端拦截器,请实现<code> ClientRequestInterceptor </code>接口。
   * 
   * 
   * @see ClientRequestInfo
   */
public interface ClientRequestInterceptorOperations  extends org.omg.PortableInterceptor.InterceptorOperations
{

  /**
     * Allows an Interceptor to query request information and modify the 
     * service context before the request is sent to the server.
     * <p>
     * This interception point may throw a system exception. If it does, 
     * no other Interceptors' <code>send_request</code> operations are called. 
     * Those Interceptors on the Flow Stack are popped and their 
     * <code>receive_exception</code> interception points are called. This 
     * interception point may also throw a <code>ForwardRequest</code> 
     * exception. If an Interceptor throws this exception, no other 
     * Interceptors' <code>send_request</code> operations are 
     * called. Those Interceptors on the Flow Stack are popped and their 
     * <code>receive_other</code> interception points are called. 
     * <p>
     * Compliant Interceptors shall properly follow completion_status 
     * semantics if they throw a system exception from this interception 
     * point. The <code>completion_status</code> shall be 
     * <code>COMPLETED_NO</code>.
     *
     * <p>
     *  允许拦截器在请求发送到服务器之前查询请求信息并修改服务上下文。
     * <p>
     * 这个拦截点可能会抛出系统异常。如果是,则不调用其他拦截器的<code> send_request </code>操作。
     * 流栈上的拦截器被弹出,它们的<code> receive_exception </code>拦截点被调用。这个拦截点也可能引发一个<code> ForwardRequest </code>异常。
     * 如果拦截器抛出此异常,则不会调用其他拦截器的<code> send_request </code>操作。
     * 流栈上的拦截器被弹出,它们的<code> receive_other </code>拦截点被调用。
     * <p>
     *  如果符合规则的拦截器从此拦截点抛出系统异常,则应正确地遵循completion_status语义。
     *  <code> completion_status </code>应为<code> COMPLETED_NO </code>。
     * 
     * 
     * @param ri Information about the current request being intercepted.
     * @exception ForwardRequest If thrown, indicates to the ORB that a
     *     retry of the request should occur with the new object given in
     *     the exception.
     */
  void send_request (org.omg.PortableInterceptor.ClientRequestInfo ri) throws org.omg.PortableInterceptor.ForwardRequest;

  /**
     * Allows an Interceptor to query information during a Time-Independent 
     * Invocation (TII) polling get reply sequence. 
     * <p>
     * With TII, an application may poll for a response to a request sent 
     * previously by the polling client or some other client. This poll is 
     * reported to Interceptors through the <code>send_poll</code> 
     * interception point and the response is returned through the 
     * <code>receive_reply</code> or <code>receive_exception</code> 
     * interception points.  If the response is not available before the
     * poll time-out expires, the system exception <code>TIMEOUT</code> is
     * thrown and <code>receive_exception</code> is called with this 
     * exception. 
     * <p>
     * This interception point may throw a system exception. If it does, 
     * no other Interceptors' <code>send_poll</code> operations are 
     * called. Those Interceptors on the Flow Stack are popped and their 
     * <code>receive_exception</code> interception points are called. 
     * <p>
     * Compliant Interceptors shall properly follow 
     * <code>completion_status</code> semantics if they throw a system 
     * exception from this interception point. The completion_status shall be 
     * <code>COMPLETED_NO</code>.
     * 
     * <p>
     *  允许拦截器在时间无关调用(TII)轮询获取回复序列期间查询信息。
     * <p>
     *  使用TII,应用可以轮询对先前由轮询客户端或一些其他客户端发送的请求的响应。
     * 这个轮询通过<code> send_poll </code>拦截点报告给拦截器,响应通过<code> receive_reply </code>或<code> receive_exception </code>
     * 拦截点返回。
     *  使用TII,应用可以轮询对先前由轮询客户端或一些其他客户端发送的请求的响应。
     * 如果在轮询超时到期之前响应不可用,那么系统异常<code> TIMEOUT </code>被抛出,并且使用此异常调用<code> receive_exception </code>。
     * <p>
     * 这个拦截点可能会抛出系统异常。如果是,则不调用其他拦截器的<code> send_poll </code>操作。
     * 流栈上的拦截器被弹出,它们的<code> receive_exception </code>拦截点被调用。
     * <p>
     *  如果符合规则的拦截器从此拦截点抛出系统异常,则应正确遵循<code> completion_status </code>语义。
     *  completion_status应为<code> COMPLETED_NO </code>。
     * 
     * 
     * @param ri Information about the current request being intercepted.
     * @exception TIMEOUT thrown if the response is not available before 
     *     the poll time-out expires
     */
  void send_poll (org.omg.PortableInterceptor.ClientRequestInfo ri);

  /**
     * Allows an Interceptor to query the information on a reply after it 
     * is returned from the server and before control is returned to the 
     * client. 
     * <p>
     * This interception point may throw a system exception. If it does, 
     * no other Interceptors' <code>receive_reply</code> operations are 
     * called. The remaining Interceptors in the Flow Stack shall have 
     * their <code>receive_exception</code> interception point called. 
     * <p>
     * Compliant Interceptors shall properly follow 
     * <code>completion_status</code> semantics if they throw a system 
     * exception from this interception point. The 
     * <code>completion_status</code> shall be <code>COMPLETED_YES</code>.
     *
     * <p>
     *  允许拦截器在从服务器返回并在控制返回到客户端之前查询回复的信息。
     * <p>
     *  这个拦截点可能会抛出系统异常。如果是,则不调用其他拦截器的<code> receive_reply </code>操作。
     * 流栈中剩余的拦截器应该调用其<code> receive_exception </code>拦截点。
     * <p>
     *  如果符合规则的拦截器从此拦截点抛出系统异常,则应正确遵循<code> completion_status </code>语义。
     *  <code> completion_status </code>应为<code> COMPLETED_YES </code>。
     * 
     * 
     * @param ri Information about the current request being intercepted.
     */
  void receive_reply (org.omg.PortableInterceptor.ClientRequestInfo ri);

  /**
     * Indicates to the interceptor that an exception occurred.  Allows
     * an Interceptor to query the exception's information before it is 
     * thrown to the client.
     * <p>
     * This interception point may throw a system exception. This has the 
     * effect of changing the exception which successive Interceptors 
     * popped from the Flow Stack receive on their calls to 
     * <code>receive_exception</code>. The exception thrown to the client 
     * will be the last exception thrown by an Interceptor, or the original 
     * exception if no Interceptor changes the exception. 
     * <p>
     * This interception point may also throw a <code>ForwardRequest</code> 
     * exception.  If an Interceptor throws this exception, no other 
     * Interceptors' <code>receive_exception</code> operations are called. 
     * The remaining Interceptors in the Flow Stack are popped and have their 
     * <code>receive_other</code> interception point called. 
     * <p>
     * If the <code>completion_status</code> of the exception is not 
     * <code>COMPLETED_NO</code>, then it is inappropriate for this 
     * interception point to throw a <code>ForwardRequest</code> exception. 
     * The request s at-most-once semantics would be lost. 
     * <p>
     * Compliant Interceptors shall properly follow 
     * <code>completion_status</code> semantics if they throw a system 
     * exception from this interception point. If the original exception is 
     * a system exception, the <code>completion_status</code> of the new 
     * exception shall be the same as on the original. If the original 
     * exception is a user exception, then the <code>completion_status</code> 
     * of the new exception shall be <code>COMPLETED_YES</code>. 
     * <p>
     * Under some conditions, depending on what policies are in effect, an 
     * exception (such as <code>COMM_FAILURE</code>) may result in a retry 
     * of the request. While this retry is a new request with respect to 
     * Interceptors, there is one point of correlation between the original 
     * request and the retry: because control has not returned to the 
     * client, the <code>PortableInterceptor.Current</code> for both the 
     * original request and the retrying request is the same.
     *
     * <p>
     *  向拦截器指示发生异常。允许拦截器在异常的信息被抛出到客户端之前查询它。
     * <p>
     * 这个拦截点可能会抛出系统异常。这具有改变从流栈中弹出的连续拦截器在其对<code> receive_exception </code>的调用时接收的异常的效果。
     * 抛出给客户端的异常将是拦截器抛出的最后一个异常,或者如果没有拦截器更改异常,则抛出原始异常。
     * <p>
     *  这个拦截点也可能引发一个<code> ForwardRequest </code>异常。
     * 如果拦截器抛出此异常,则不会调用其他拦截器的<code> receive_exception </code>操作。
     * 流栈中剩余的拦截器被弹出,并调用它们的<code> receive_other </code>拦截点。
     * <p>
     *  如果异常的<code> completion_status </code>不是<code> COMPLETED_NO </code>,那么这个拦截点不应该抛出一个<code> ForwardReque
     * st </code>异常。
     * 请求的最多一次语义将丢失。
     * <p>
     *  如果符合规则的拦截器从此拦截点抛出系统异常,则应正确遵循<code> completion_status </code>语义。
     * 如果原始异常是系统异常,则新异常的<code> completion_status </code>应与原始异常相同。
     * 如果原始异常是用户异常,则新异常的<code> completion_status </code>应为<code> COMPLETED_YES </code>。
     * <p>
     * 在某些情况下,根据有效的策略,异常(例如<code> COMM_FAILURE </code>)可能导致请求重试。
     * 虽然此重试是关于拦截器的新请求,但是原始请求和重试之间存在一个相关点：因为控制没有返回到客户端,所以原始请求的<code> PortableInterceptor.Current </code>请求和重
     * 试请求是一样的。
     * 在某些情况下,根据有效的策略,异常(例如<code> COMM_FAILURE </code>)可能导致请求重试。
     * 
     * @param ri Information about the current request being intercepted.
     * @exception ForwardRequest If thrown, indicates to the ORB that a
     *     retry of the request should occur with the new object given in
     *     the exception.
     */
  void receive_exception (org.omg.PortableInterceptor.ClientRequestInfo ri) throws org.omg.PortableInterceptor.ForwardRequest;

  /**
     * Allows an Interceptor to query the information available when a 
     * request results in something other than a normal reply or an 
     * exception. For example, a request could result in a retry 
     * (e.g., a GIOP Reply with a <code>LOCATION_FORWARD</code> status was 
     * received); or on asynchronous calls, the reply does not immediately 
     * follow the request, but control shall return to the client and an 
     * ending interception point shall be called. 
     * <p>
     * For retries, depending on the policies in effect, a new request may or 
     * may not follow when a retry has been indicated. If a new request does 
     * follow, while this request is a new request, with respect to 
     * Interceptors, there is one point of correlation between the original 
     * request and the retry: because control has not returned to the client, 
     * the request scoped <code>PortableInterceptor.Current</code> for both 
     * the original request and the retrying request is the same.  
     * <p>
     * This interception point may throw a system exception. If it does, no 
     * other Interceptors' <code>receive_other</code> operations are called. 
     * The remaining Interceptors in the Flow Stack are popped and have 
     * their <code>receive_exception</code> interception point called.
     * <p>
     * This interception point may also throw a <code>ForwardRequest</code> 
     * exception.  If an Interceptor throws this exception, successive 
     * Interceptors' <code>receive_other</code> operations are called with 
     * the new information provided by the <code>ForwardRequest</code> 
     * exception. 
     * <p>
     * Compliant Interceptors shall properly follow 
     * <code>completion_status</code> semantics if they throw a system 
     * exception from this interception point. The 
     * <code>completion_status</code> shall be <code>COMPLETED_NO</code>. 
     * If the target invocation had completed, this interception point 
     * would not be called.
     * 
     * <p>
     * 
     * 
     * @param ri Information about the current request being intercepted.
     * @exception ForwardRequest If thrown, indicates to the ORB that a
     *     retry of the request should occur with the new object given in
     *     the exception.
     */
  void receive_other (org.omg.PortableInterceptor.ClientRequestInfo ri) throws org.omg.PortableInterceptor.ForwardRequest;
} // interface ClientRequestInterceptorOperations
