/***** Lobxxx Translate Finished ******/
/*
 * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

package java.sql;

/**
 * <P>The object used for executing a static SQL statement
 * and returning the results it produces.
 * <P>
 * By default, only one <code>ResultSet</code> object per <code>Statement</code>
 * object can be open at the same time. Therefore, if the reading of one
 * <code>ResultSet</code> object is interleaved
 * with the reading of another, each must have been generated by
 * different <code>Statement</code> objects. All execution methods in the
 * <code>Statement</code> interface implicitly close a current
 * <code>ResultSet</code> object of the statement if an open one exists.
 *
 * <p>
 *  <P>用于执行静态SQL语句并返回其生成的结果的对象。
 * <P>
 *  默认情况下,每个<code> Statement </code>对象只能有一个<code> ResultSet </code>对象可以同时打开。
 * 因此,如果一个<code> ResultSet </code>对象的读取与另一个的读取交错,则每个对象必须由不同的<code> Statement </code>对象生成。
 *  <code> Statement </code>接口中的所有执行方法隐含地关闭语句的当前<code> ResultSet </code>对象(如果存在打开的对象)。
 * 
 * 
 * @see Connection#createStatement
 * @see ResultSet
 */
public interface Statement extends Wrapper, AutoCloseable {

    /**
     * Executes the given SQL statement, which returns a single
     * <code>ResultSet</code> object.
     *<p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     *  执行给定的SQL语句,它返回单个<code> ResultSet </code>对象。
     * p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * 
     * 
     * @param sql an SQL statement to be sent to the database, typically a
     *        static SQL <code>SELECT</code> statement
     * @return a <code>ResultSet</code> object that contains the data produced
     *         by the given query; never <code>null</code>
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the given
     *            SQL statement produces anything other than a single
     *            <code>ResultSet</code> object, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     */
    ResultSet executeQuery(String sql) throws SQLException;

    /**
     * Executes the given SQL statement, which may be an <code>INSERT</code>,
     * <code>UPDATE</code>, or <code>DELETE</code> statement or an
     * SQL statement that returns nothing, such as an SQL DDL statement.
     *<p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     *  执行给定的SQL语句,可以是<code> INSERT </code>,<code> UPDATE </code>或<code> DELETE </code>语句或不返回任何内容的SQL语句, DDL
     * 语句。
     * p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * 
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     *
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     *         or (2) 0 for SQL statements that return nothing
     *
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the given
     * SQL statement produces a <code>ResultSet</code> object, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     */
    int executeUpdate(String sql) throws SQLException;

    /**
     * Releases this <code>Statement</code> object's database
     * and JDBC resources immediately instead of waiting for
     * this to happen when it is automatically closed.
     * It is generally good practice to release resources as soon as
     * you are finished with them to avoid tying up database
     * resources.
     * <P>
     * Calling the method <code>close</code> on a <code>Statement</code>
     * object that is already closed has no effect.
     * <P>
     * <B>Note:</B>When a <code>Statement</code> object is
     * closed, its current <code>ResultSet</code> object, if one exists, is
     * also closed.
     *
     * <p>
     * 立即释放此<code> Statement </code>对象的数据库和JDBC资源,而不是在自动关闭时等待此事件发生。一旦完成它们,一般是良好的做法释放资源,以避免占用数据库资源。
     * <P>
     *  调用已经关闭的<code> Statement </code>对象上的<code> close </code>方法没有效果。
     * <P>
     *  <B>注意：</B>当一个<code> Statement </code>对象关闭时,它的当前<code> ResultSet </code>对象
     * 
     * 
     * @exception SQLException if a database access error occurs
     */
    void close() throws SQLException;

    //----------------------------------------------------------------------

    /**
     * Retrieves the maximum number of bytes that can be
     * returned for character and binary column values in a <code>ResultSet</code>
     * object produced by this <code>Statement</code> object.
     * This limit applies only to  <code>BINARY</code>, <code>VARBINARY</code>,
     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
     * <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>
     * and <code>LONGVARCHAR</code> columns.  If the limit is exceeded, the
     * excess data is silently discarded.
     *
     * <p>
     *  检索由此<code> Statement </code>对象生成的<code> ResultSet </code>对象中可返回字符和二进制列值的最大字节数。
     * 此限制仅适用于<code> BINARY </code>,<code> VARBINARY </code>,<code> LONGVARBINARY </code>,<code> CHAR </code>
     * ,<code> VARCHAR </code> <code> NCHAR </code>,<code> NVARCHAR </code>,<code> LONGNVARCHAR </code>和<code>
     *  LONGVARCHAR </code>列。
     *  检索由此<code> Statement </code>对象生成的<code> ResultSet </code>对象中可返回字符和二进制列值的最大字节数。如果超过限制,则超出的数据将被静默丢弃。
     * 
     * 
     * @return the current column size limit for columns storing character and
     *         binary values; zero means there is no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setMaxFieldSize
     */
    int getMaxFieldSize() throws SQLException;

    /**
     * Sets the limit for the maximum number of bytes that can be returned for
     * character and binary column values in a <code>ResultSet</code>
     * object produced by this <code>Statement</code> object.
     *
     * This limit applies
     * only to <code>BINARY</code>, <code>VARBINARY</code>,
     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
     * <code>NCHAR</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code> and
     * <code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data
     * is silently discarded. For maximum portability, use values
     * greater than 256.
     *
     * <p>
     *  设置由<code> Statement </code>对象生成的<code> ResultSet </code>对象中可返回字符和二进制列值的最大字节数限制。
     * 
     * 此限制仅适用于<code> BINARY </code>,<code> VARBINARY </code>,<code> LONGVARBINARY </code>,<code> CHAR </code>
     * ,<code> VARCHAR </code> <code> NCHAR </code>,<code> NVARCHAR </code>,<code> LONGNVARCHAR </code>和<code>
     *  LONGVARCHAR </code>字段。
     * 如果超过限制,则超出的数据将被静默丢弃。为了实现最大可移植性,请使用大于256的值。
     * 
     * 
     * @param max the new column size limit in bytes; zero means there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition {@code max >= 0} is not satisfied
     * @see #getMaxFieldSize
     */
    void setMaxFieldSize(int max) throws SQLException;

    /**
     * Retrieves the maximum number of rows that a
     * <code>ResultSet</code> object produced by this
     * <code>Statement</code> object can contain.  If this limit is exceeded,
     * the excess rows are silently dropped.
     *
     * <p>
     *  检索由此<code> Statement </code>对象生成的<code> ResultSet </code>对象可以包含的最大行数。如果超出此限制,则将静默删除多余的行。
     * 
     * 
     * @return the current maximum number of rows for a <code>ResultSet</code>
     *         object produced by this <code>Statement</code> object;
     *         zero means there is no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setMaxRows
     */
    int getMaxRows() throws SQLException;

    /**
     * Sets the limit for the maximum number of rows that any
     * <code>ResultSet</code> object  generated by this <code>Statement</code>
     * object can contain to the given number.
     * If the limit is exceeded, the excess
     * rows are silently dropped.
     *
     * <p>
     *  设置<code> Statement </code>对象生成的任何<code> ResultSet </code>对象可以包含给定数字的最大行数限制。如果超过限制,则超出的行将被静默删除。
     * 
     * 
     * @param max the new max rows limit; zero means there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition {@code max >= 0} is not satisfied
     * @see #getMaxRows
     */
    void setMaxRows(int max) throws SQLException;

    /**
     * Sets escape processing on or off.
     * If escape scanning is on (the default), the driver will do
     * escape substitution before sending the SQL statement to the database.
     *<p>
     * The {@code Connection} and {@code DataSource} property
     * {@code escapeProcessing} may be used to change the default escape processing
     * behavior.  A value of true (the default) enables escape Processing for
     * all {@code Statement} objects. A value of false disables escape processing
     * for all {@code Statement} objects.  The {@code setEscapeProcessing}
     * method may be used to specify the escape processing behavior for an
     * individual {@code Statement} object.
     * <p>
     * Note: Since prepared statements have usually been parsed prior
     * to making this call, disabling escape processing for
     * <code>PreparedStatements</code> objects will have no effect.
     *
     * <p>
     *  设置或禁用转义处理。如果启用了逃生扫描(默认值),驱动程序将在将SQL语句发送到数据库之前执行转义替换。
     * p>
     *  {@code Connection}和{@code DataSource}属性{@code escapeProcessing}可用于更改默认的转义处理行为。
     * 值为true(默认值)对所有{@code Statement}对象启用转义处理。值为false会禁用所有{@code Statement}对象的转义处理。
     *  {@code setEscapeProcessing}方法可用于为单个{@code Statement}对象指定转义处理行为。
     * <p>
     * 注意：由于准备语句通常在进行此调用之前被解析,因此禁用<code> PreparedStatements </code>对象的转义处理将不起作用。
     * 
     * 
     * @param enable <code>true</code> to enable escape processing;
     *       <code>false</code> to disable it
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     */
    void setEscapeProcessing(boolean enable) throws SQLException;

    /**
     * Retrieves the number of seconds the driver will
     * wait for a <code>Statement</code> object to execute.
     * If the limit is exceeded, a
     * <code>SQLException</code> is thrown.
     *
     * <p>
     *  检索驱动程序等待执行<code> Statement </code>对象的秒数。如果超过限制,将抛出<code> SQLException </code>。
     * 
     * 
     * @return the current query timeout limit in seconds; zero means there is
     *         no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setQueryTimeout
     */
    int getQueryTimeout() throws SQLException;

    /**
     * Sets the number of seconds the driver will wait for a
     * <code>Statement</code> object to execute to the given number of seconds.
     *By default there is no limit on the amount of time allowed for a running
     * statement to complete. If the limit is exceeded, an
     * <code>SQLTimeoutException</code> is thrown.
     * A JDBC driver must apply this limit to the <code>execute</code>,
     * <code>executeQuery</code> and <code>executeUpdate</code> methods.
     * <p>
     * <strong>Note:</strong> JDBC driver implementations may also apply this
     * limit to {@code ResultSet} methods
     * (consult your driver vendor documentation for details).
     * <p>
     * <strong>Note:</strong> In the case of {@code Statement} batching, it is
     * implementation defined as to whether the time-out is applied to
     * individual SQL commands added via the {@code addBatch} method or to
     * the entire batch of SQL commands invoked by the {@code executeBatch}
     * method (consult your driver vendor documentation for details).
     *
     * <p>
     *  设置驱动程序等待<code> Statement </code>对象执行到给定秒数的秒数。 y默认情况下,对于运行语句完成所允许的时间量没有限制。
     * 如果超出限制,则会抛出<code> SQLTimeoutException </code>。
     *  JDBC驱动程序必须将此限制应用于<code> execute </code>,<code> executeQuery </code>和<code> executeUpdate </code>方法。
     * <p>
     *  <strong>注意</strong>：JDBC驱动程序实现也可以将此限制应用于{@code ResultSet}方法(有关详细信息,请参考驱动程序供应商文档)。
     * <p>
     *  <strong>注意</strong>：对于{@code Statement}批处理,它是实现定义的超时是否应用于通过{@code addBatch}方法添加的单个SQL命令或整个{@code executeBatch}
     * 方法调用的一批SQL命令(有关详细信息,请参阅驱动程序供应商文档)。
     * 
     * 
     * @param seconds the new query timeout limit in seconds; zero means
     *        there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition {@code seconds >= 0} is not satisfied
     * @see #getQueryTimeout
     */
    void setQueryTimeout(int seconds) throws SQLException;

    /**
     * Cancels this <code>Statement</code> object if both the DBMS and
     * driver support aborting an SQL statement.
     * This method can be used by one thread to cancel a statement that
     * is being executed by another thread.
     *
     * <p>
     *  如果DBMS和驱动程序支持中止一个SQL语句,则取消此<code> Statement </code>对象。这个方法可以被一个线程用来取消由另一个线程执行的语句。
     * 
     * 
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method
     */
    void cancel() throws SQLException;

    /**
     * Retrieves the first warning reported by calls on this <code>Statement</code> object.
     * Subsequent <code>Statement</code> object warnings will be chained to this
     * <code>SQLWarning</code> object.
     *
     * <p>The warning chain is automatically cleared each time
     * a statement is (re)executed. This method may not be called on a closed
     * <code>Statement</code> object; doing so will cause an <code>SQLException</code>
     * to be thrown.
     *
     * <P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any
     * warnings associated with reads on that <code>ResultSet</code> object
     * will be chained on it rather than on the <code>Statement</code>
     * object that produced it.
     *
     * <p>
     * 检索此<code> Statement </code>对象上调用所报告的第一个警告。
     * 后续<code> Statement </code>对象警告将链接到此<code> SQLWarning </code>对象。
     * 
     *  <p>警告链会在每次重新执行语句时自动清除。此方法可能不会在封闭的<code> Statement </code>对象上调用;这样做会导致抛出<code> SQLException </code>。
     * 
     *  <P> <B>注意：</B>如果您正在处理一个<code> ResultSet </code>对象,那么与<code> ResultSet </code>对象上的读取相关联的任何警告都将链接在其上,而
     * 不是在产生它的<code> Statement </code>对象上。
     * 
     * 
     * @return the first <code>SQLWarning</code> object or <code>null</code>
     *         if there are no warnings
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     */
    SQLWarning getWarnings() throws SQLException;

    /**
     * Clears all the warnings reported on this <code>Statement</code>
     * object. After a call to this method,
     * the method <code>getWarnings</code> will return
     * <code>null</code> until a new warning is reported for this
     * <code>Statement</code> object.
     *
     * <p>
     *  清除此<code> Statement </code>对象上报告的所有警告。
     * 调用此方法后,<code> getWarnings </code>方法将返回<code> null </code>,直到为此<code> Statement </code>对象报告新的警告。
     * 
     * 
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     */
    void clearWarnings() throws SQLException;

    /**
     * Sets the SQL cursor name to the given <code>String</code>, which
     * will be used by subsequent <code>Statement</code> object
     * <code>execute</code> methods. This name can then be
     * used in SQL positioned update or delete statements to identify the
     * current row in the <code>ResultSet</code> object generated by this
     * statement.  If the database does not support positioned update/delete,
     * this method is a noop.  To insure that a cursor has the proper isolation
     * level to support updates, the cursor's <code>SELECT</code> statement
     * should have the form <code>SELECT FOR UPDATE</code>.  If
     * <code>FOR UPDATE</code> is not present, positioned updates may fail.
     *
     * <P><B>Note:</B> By definition, the execution of positioned updates and
     * deletes must be done by a different <code>Statement</code> object than
     * the one that generated the <code>ResultSet</code> object being used for
     * positioning. Also, cursor names must be unique within a connection.
     *
     * <p>
     * 将SQL游标名称设置为给定的<code> String </code>,它将被后续的<code> Statement </code>对象<code> execute </code>方法使用。
     * 然后可以在SQL定位的update或delete语句中使用此名称来标识由此语句生成的<code> ResultSet </code>对象中的当前行。如果数据库不支持定位更新/删除,此方法是noop。
     * 为了确保游标具有适当的隔离级别以支持更新,游标的<code> SELECT </code>语句应该具有<code> SELECT FOR UPDATE </code>的形式。
     * 如果<code> FOR UPDATE </code>不存在,定位的更新可能会失败。
     * 
     *  <P> <B>注意：</B>根据定义,定位更新和删除的执行必须由与生成<code> ResultSet </code的对象不同的<code> Statement </code> >用于定位的对象。
     * 此外,光标名称在连接中必须是唯一的。
     * 
     * 
     * @param name the new cursor name, which must be unique within
     *             a connection
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     */
    void setCursorName(String name) throws SQLException;

    //----------------------- Multiple Results --------------------------

    /**
     * Executes the given SQL statement, which may return multiple results.
     * In some (uncommon) situations, a single SQL statement may return
     * multiple result sets and/or update counts.  Normally you can ignore
     * this unless you are (1) executing a stored procedure that you know may
     * return multiple results or (2) you are dynamically executing an
     * unknown SQL string.
     * <P>
     * The <code>execute</code> method executes an SQL statement and indicates the
     * form of the first result.  You must then use the methods
     * <code>getResultSet</code> or <code>getUpdateCount</code>
     * to retrieve the result, and <code>getMoreResults</code> to
     * move to any subsequent result(s).
     * <p>
     *<strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     *  执行给定的SQL语句,它可能返回多个结果。在一些(不常见的)情况下,单个SQL语句可能返回多个结果集和/或更新计数。
     * 通常,您可以忽略此操作,除非您(1)执行一个您知道可能返回多个结果的存储过程,或(2)您正在动态执行未知的SQL字符串。
     * <P>
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * 然后必须使用方法<code> getResultSet </code>或<code> getUpdateCount </code>检索结果,并使用<code> getMoreResults </code>
     * 移动到任何后续结果。
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * <p>
     *  strong>注意</strong>：此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>上调用。
     * 
     * 
     * @param sql any SQL statement
     * @return <code>true</code> if the first result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are
     *         no results
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>,
     * the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @see #getResultSet
     * @see #getUpdateCount
     * @see #getMoreResults
     */
    boolean execute(String sql) throws SQLException;

    /**
     *  Retrieves the current result as a <code>ResultSet</code> object.
     *  This method should be called only once per result.
     *
     * <p>
     *  将当前结果作为<code> ResultSet </code>对象检索。每个结果只应调用此方法一次。
     * 
     * 
     * @return the current result as a <code>ResultSet</code> object or
     * <code>null</code> if the result is an update count or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    ResultSet getResultSet() throws SQLException;

    /**
     *  Retrieves the current result as an update count;
     *  if the result is a <code>ResultSet</code> object or there are no more results, -1
     *  is returned. This method should be called only once per result.
     *
     * <p>
     *  检索当前结果作为更新计数;如果结果是一个<code> ResultSet </code>对象或没有更多的结果,则返回-1。每个结果只应调用此方法一次。
     * 
     * 
     * @return the current result as an update count; -1 if the current result is a
     * <code>ResultSet</code> object or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    int getUpdateCount() throws SQLException;

    /**
     * Moves to this <code>Statement</code> object's next result, returns
     * <code>true</code> if it is a <code>ResultSet</code> object, and
     * implicitly closes any current <code>ResultSet</code>
     * object(s) obtained with the method <code>getResultSet</code>.
     *
     * <P>There are no more results when the following is true:
     * <PRE>{@code
     *     // stmt is a Statement object
     *     ((stmt.getMoreResults() == false) && (stmt.getUpdateCount() == -1))
     * }</PRE>
     *
     * <p>
     *  移动到此<code> Statement </code>对象的下一个结果,如果它是一个<code> ResultSet </code>对象,则返回<code> true </code>,并隐式关闭任何
     * 当前<code> ResultSet </code >通过方法<code> getResultSet </code>获得的对象。
     * 
     *  <P>当以下是真的时,没有更多的结果：<PRE> {@ code // stmt是一个Statement对象((stmt.getMoreResults()== false)&&(stmt.getUpdateCount()== -1) )}
     *  </PRE>。
     * 
     * 
     * @return <code>true</code> if the next result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are
     *         no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     */
    boolean getMoreResults() throws SQLException;


    //--------------------------JDBC 2.0-----------------------------


    /**
     * Gives the driver a hint as to the direction in which
     * rows will be processed in <code>ResultSet</code>
     * objects created using this <code>Statement</code> object.  The
     * default value is <code>ResultSet.FETCH_FORWARD</code>.
     * <P>
     * Note that this method sets the default fetch direction for
     * result sets generated by this <code>Statement</code> object.
     * Each result set has its own methods for getting and setting
     * its own fetch direction.
     *
     * <p>
     *  向驱动程序提供关于使用此<code> Statement </code>对象创建的<code> ResultSet </code>对象中将处理行的方向的提示。
     * 默认值为<code> ResultSet.FETCH_FORWARD </code>。
     * <P>
     * 请注意,此方法为由此<code> Statement </code>对象生成的结果集设置默认提取方向。每个结果集都有自己的方法来获取和设置自己的获取方向。
     * 
     * 
     * @param direction the initial direction for processing rows
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     * or the given direction
     * is not one of <code>ResultSet.FETCH_FORWARD</code>,
     * <code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>
     * @since 1.2
     * @see #getFetchDirection
     */
    void setFetchDirection(int direction) throws SQLException;

    /**
     * Retrieves the direction for fetching rows from
     * database tables that is the default for result sets
     * generated from this <code>Statement</code> object.
     * If this <code>Statement</code> object has not set
     * a fetch direction by calling the method <code>setFetchDirection</code>,
     * the return value is implementation-specific.
     *
     * <p>
     *  检索从数据库表中提取行的方向,这是从此<code> Statement </code>对象生成的结果集的默认行。
     * 如果这个<code> Statement </code>对象没有通过调用<code> setFetchDirection </code>方法来设置获取方向,则返回值是实现特定的。
     * 
     * 
     * @return the default fetch direction for result sets generated
     *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since 1.2
     * @see #setFetchDirection
     */
    int getFetchDirection() throws SQLException;

    /**
     * Gives the JDBC driver a hint as to the number of rows that should
     * be fetched from the database when more rows are needed for
     * <code>ResultSet</code> objects generated by this <code>Statement</code>.
     * If the value specified is zero, then the hint is ignored.
     * The default value is zero.
     *
     * <p>
     *  向JDBC驱动程序提供关于在由此<code> Statement </code>生成的<code> ResultSet </code>对象需要更多行时应从数据库获取的行数的提示。
     * 如果指定的值为零,则忽略提示。默认值为零。
     * 
     * 
     * @param rows the number of rows to fetch
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the
     *        condition {@code rows >= 0} is not satisfied.
     * @since 1.2
     * @see #getFetchSize
     */
    void setFetchSize(int rows) throws SQLException;

    /**
     * Retrieves the number of result set rows that is the default
     * fetch size for <code>ResultSet</code> objects
     * generated from this <code>Statement</code> object.
     * If this <code>Statement</code> object has not set
     * a fetch size by calling the method <code>setFetchSize</code>,
     * the return value is implementation-specific.
     *
     * <p>
     *  检索从此<code> Statement </code>对象生成的<code> ResultSet </code>对象的默认访存大小的结果集行数。
     * 如果这个<code> Statement </code>对象没有通过调用<code> setFetchSize </code>方法来设置获取大小,那么返回值是实现特定的。
     * 
     * 
     * @return the default fetch size for result sets generated
     *          from this <code>Statement</code> object
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since 1.2
     * @see #setFetchSize
     */
    int getFetchSize() throws SQLException;

    /**
     * Retrieves the result set concurrency for <code>ResultSet</code> objects
     * generated by this <code>Statement</code> object.
     *
     * <p>
     *  检索由此<code> Statement </code>对象生成的<code> ResultSet </code>对象的结果集并发。
     * 
     * 
     * @return either <code>ResultSet.CONCUR_READ_ONLY</code> or
     * <code>ResultSet.CONCUR_UPDATABLE</code>
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since 1.2
     */
    int getResultSetConcurrency() throws SQLException;

    /**
     * Retrieves the result set type for <code>ResultSet</code> objects
     * generated by this <code>Statement</code> object.
     *
     * <p>
     *  检索由此<code> Statement </code>对象生成的<code> ResultSet </code>对象的结果集类型。
     * 
     * 
     * @return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,
     * <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
     * <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since 1.2
     */
    int getResultSetType()  throws SQLException;

    /**
     * Adds the given SQL command to the current list of commands for this
     * <code>Statement</code> object. The commands in this list can be
     * executed as a batch by calling the method <code>executeBatch</code>.
     * <P>
     *<strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     * 将给定的SQL命令添加到此<code> Statement </code>对象的当前命令列表中。此列表中的命令可以通过调用<code> executeBatch </code>方法作为批处理执行。
     * <P>
     *  strong>注意</strong>：此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>上调用。
     * 
     * 
     * @param sql typically this is a SQL <code>INSERT</code> or
     * <code>UPDATE</code> statement
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the
     * driver does not support batch updates, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @see #executeBatch
     * @see DatabaseMetaData#supportsBatchUpdates
     * @since 1.2
     */
    void addBatch( String sql ) throws SQLException;

    /**
     * Empties this <code>Statement</code> object's current list of
     * SQL commands.
     * <P>
     * <p>
     *  清空此<code> Statement </code>对象的当前SQL命令列表。
     * <P>
     * 
     * @exception SQLException if a database access error occurs,
     *  this method is called on a closed <code>Statement</code> or the
     * driver does not support batch updates
     * @see #addBatch
     * @see DatabaseMetaData#supportsBatchUpdates
     * @since 1.2
     */
    void clearBatch() throws SQLException;

    /**
     * Submits a batch of commands to the database for execution and
     * if all commands execute successfully, returns an array of update counts.
     * The <code>int</code> elements of the array that is returned are ordered
     * to correspond to the commands in the batch, which are ordered
     * according to the order in which they were added to the batch.
     * The elements in the array returned by the method <code>executeBatch</code>
     * may be one of the following:
     * <OL>
     * <LI>A number greater than or equal to zero -- indicates that the
     * command was processed successfully and is an update count giving the
     * number of rows in the database that were affected by the command's
     * execution
     * <LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was
     * processed successfully but that the number of rows affected is
     * unknown
     * <P>
     * If one of the commands in a batch update fails to execute properly,
     * this method throws a <code>BatchUpdateException</code>, and a JDBC
     * driver may or may not continue to process the remaining commands in
     * the batch.  However, the driver's behavior must be consistent with a
     * particular DBMS, either always continuing to process commands or never
     * continuing to process commands.  If the driver continues processing
     * after a failure, the array returned by the method
     * <code>BatchUpdateException.getUpdateCounts</code>
     * will contain as many elements as there are commands in the batch, and
     * at least one of the elements will be the following:
     *
     * <LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed
     * to execute successfully and occurs only if a driver continues to
     * process commands after a command fails
     * </OL>
     * <P>
     * The possible implementations and return values have been modified in
     * the Java 2 SDK, Standard Edition, version 1.3 to
     * accommodate the option of continuing to process commands in a batch
     * update after a <code>BatchUpdateException</code> object has been thrown.
     *
     * <p>
     *  将一批命令提交到数据库以供执行,如果所有命令成功执行,则返回更新计数的数组。返回的数组的<code> int </code>元素被排序为对应于批处理中的命令,这些命令根据它们添加到批处理的顺序排序。
     * 由方法<code> executeBatch </code>返回的数组中的元素可能是以下之一：。
     * <OL>
     *  <LI>大于或等于零的数字表示命令已成功处理,是一个更新计数,提供数据库中受命令执行影响的行数<LI> <code> SUCCESS_NO_INFO的值</code>  - 表示命令已成功处理,但受影
     * 响的行数未知。
     * <P>
     * 如果批处理更新中的某个命令无法正常执行,此方法会抛出<code> BatchUpdateException </code>,并且JDBC驱动程序可能也可能不会继续处理批处理中的其余命令。
     * 然而,驱动程序的行为必须与特定的DBMS一致,总是继续处理命令或从不继续处理命令。
     * 如果驱动程序在故障后继续处理,由方法<code> BatchUpdateException.getUpdateCounts </code>返回的数组将包含与批处理中的命令一样多的元素,并且至少有一个元素
     * 如下：。
     * 然而,驱动程序的行为必须与特定的DBMS一致,总是继续处理命令或从不继续处理命令。
     * 
     *  <LI> <code> EXECUTE_FAILED </code>的值表示该命令无法成功执行,并且仅在驱动程序在命令失败后继续处理命令时发生
     * </OL>
     * <P>
     *  在Java 2 SDK,标准版本1.3中修改了可能的实现和返回值,以适应在引发<code> BatchUpdateException </code>对象后继续处理批量更新中的命令的选项。
     * 
     * 
     * @return an array of update counts containing one element for each
     * command in the batch.  The elements of the array are ordered according
     * to the order in which commands were added to the batch.
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the
     * driver does not support batch statements. Throws {@link BatchUpdateException}
     * (a subclass of <code>SQLException</code>) if one of the commands sent to the
     * database fails to execute properly or attempts to return a result set.
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     *
     * @see #addBatch
     * @see DatabaseMetaData#supportsBatchUpdates
     * @since 1.2
     */
    int[] executeBatch() throws SQLException;

    /**
     * Retrieves the <code>Connection</code> object
     * that produced this <code>Statement</code> object.
     * <p>
     *  检索生成此<code> Statement </code>对象的<code> Connection </code>对象。
     * 
     * 
     * @return the connection that produced this statement
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @since 1.2
     */
    Connection getConnection()  throws SQLException;

  //--------------------------JDBC 3.0-----------------------------

    /**
     * The constant indicating that the current <code>ResultSet</code> object
     * should be closed when calling <code>getMoreResults</code>.
     *
     * <p>
     *  常量指示当调用<code> getMoreResults </code>时,当前<code> ResultSet </code>对象应该关闭。
     * 
     * 
     * @since 1.4
     */
    int CLOSE_CURRENT_RESULT = 1;

    /**
     * The constant indicating that the current <code>ResultSet</code> object
     * should not be closed when calling <code>getMoreResults</code>.
     *
     * <p>
     *  常量指示当调用<code> getMoreResults </code>时,不应关闭当前<code> ResultSet </code>对象。
     * 
     * 
     * @since 1.4
     */
    int KEEP_CURRENT_RESULT = 2;

    /**
     * The constant indicating that all <code>ResultSet</code> objects that
     * have previously been kept open should be closed when calling
     * <code>getMoreResults</code>.
     *
     * <p>
     * 常量指示所有以前保持打开的<code> ResultSet </code>对象在调用<code> getMoreResults </code>时应关闭。
     * 
     * 
     * @since 1.4
     */
    int CLOSE_ALL_RESULTS = 3;

    /**
     * The constant indicating that a batch statement executed successfully
     * but that no count of the number of rows it affected is available.
     *
     * <p>
     *  该常量指示批处理语句已成功执行,但没有对其影响的行数的计数可用。
     * 
     * 
     * @since 1.4
     */
    int SUCCESS_NO_INFO = -2;

    /**
     * The constant indicating that an error occurred while executing a
     * batch statement.
     *
     * <p>
     *  常量,表示执行批处理语句时发生错误。
     * 
     * 
     * @since 1.4
     */
    int EXECUTE_FAILED = -3;

    /**
     * The constant indicating that generated keys should be made
     * available for retrieval.
     *
     * <p>
     *  常数,指示生成的键应该可用于检索。
     * 
     * 
     * @since 1.4
     */
    int RETURN_GENERATED_KEYS = 1;

    /**
     * The constant indicating that generated keys should not be made
     * available for retrieval.
     *
     * <p>
     *  常数,指示生成的键不应提供检索。
     * 
     * 
     * @since 1.4
     */
    int NO_GENERATED_KEYS = 2;

    /**
     * Moves to this <code>Statement</code> object's next result, deals with
     * any current <code>ResultSet</code> object(s) according  to the instructions
     * specified by the given flag, and returns
     * <code>true</code> if the next result is a <code>ResultSet</code> object.
     *
     * <P>There are no more results when the following is true:
     * <PRE>{@code
     *     // stmt is a Statement object
     *     ((stmt.getMoreResults(current) == false) && (stmt.getUpdateCount() == -1))
     * }</PRE>
     *
     * <p>
     *  移动到此<code> Statement </code>对象的下一个结果,根据给定标志指定的指令处理任何当前<code> ResultSet </code>对象,并返回<code> true </code >
     * 如果下一个结果是一个<code> ResultSet </code>对象。
     * 
     *  <P>当以下是真的时,没有更多的结果：<PRE> {@ code // stmt是一个Statement对象((stmt.getMoreResults(current)== false)&&(stmt.getUpdateCount ))}
     *  </PRE>。
     * 
     * 
     * @param current one of the following <code>Statement</code>
     *        constants indicating what should happen to current
     *        <code>ResultSet</code> objects obtained using the method
     *        <code>getResultSet</code>:
     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,
     *        <code>Statement.KEEP_CURRENT_RESULT</code>, or
     *        <code>Statement.CLOSE_ALL_RESULTS</code>
     * @return <code>true</code> if the next result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are no
     *         more results
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the argument
         *         supplied is not one of the following:
     *        <code>Statement.CLOSE_CURRENT_RESULT</code>,
     *        <code>Statement.KEEP_CURRENT_RESULT</code> or
     *        <code>Statement.CLOSE_ALL_RESULTS</code>
     *@exception SQLFeatureNotSupportedException if
     * <code>DatabaseMetaData.supportsMultipleOpenResults</code> returns
     * <code>false</code> and either
     *        <code>Statement.KEEP_CURRENT_RESULT</code> or
     *        <code>Statement.CLOSE_ALL_RESULTS</code> are supplied as
     * the argument.
     * @since 1.4
     * @see #execute
     */
    boolean getMoreResults(int current) throws SQLException;

    /**
     * Retrieves any auto-generated keys created as a result of executing this
     * <code>Statement</code> object. If this <code>Statement</code> object did
     * not generate any keys, an empty <code>ResultSet</code>
     * object is returned.
     *
     *<p><B>Note:</B>If the columns which represent the auto-generated keys were not specified,
     * the JDBC driver implementation will determine the columns which best represent the auto-generated keys.
     *
     * <p>
     *  检索由于执行此<code> Statement </code>对象而创建的任何自动生成的键。
     * 如果这个<code> Statement </code>对象没有生成任何键,则返回一个空的<code> ResultSet </code>对象。
     * 
     *  p> <B>注意：</B>如果未指定表示自动生成的键的列,JDBC驱动程序实现将确定最能代表自动生成的键的列。
     * 
     * 
     * @return a <code>ResultSet</code> object containing the auto-generated key(s)
     *         generated by the execution of this <code>Statement</code> object
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @since 1.4
     */
    ResultSet getGeneratedKeys() throws SQLException;

    /**
     * Executes the given SQL statement and signals the driver with the
     * given flag about whether the
     * auto-generated keys produced by this <code>Statement</code> object
     * should be made available for retrieval.  The driver will ignore the
     * flag if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     *<p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     * 执行给定的SQL语句,并用给定标志向驱动程序发出信号,告知该<code> Statement </code>对象生成的自动生成的键是否应该可用于检索。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该标志。
     * p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * 
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     *
     * @param autoGeneratedKeys a flag indicating whether auto-generated keys
     *        should be made available for retrieval;
     *         one of the following constants:
     *         <code>Statement.RETURN_GENERATED_KEYS</code>
     *         <code>Statement.NO_GENERATED_KEYS</code>
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     *         or (2) 0 for SQL statements that return nothing
     *
     * @exception SQLException if a database access error occurs,
     *  this method is called on a closed <code>Statement</code>, the given
     *            SQL statement returns a <code>ResultSet</code> object,
     *            the given constant is not one of those allowed, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method with a constant of Statement.RETURN_GENERATED_KEYS
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @since 1.4
     */
    int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException;

    /**
     * Executes the given SQL statement and signals the driver that the
     * auto-generated keys indicated in the given array should be made available
     * for retrieval.   This array contains the indexes of the columns in the
     * target table that contain the auto-generated keys that should be made
     * available. The driver will ignore the array if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     *<p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     *  执行给定的SQL语句,并通知驱动程序给定数组中指示的自动生成的键应该可用于检索。此数组包含目标表中包含应该可用的自动生成的键的列的索引。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该数组。
     * p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * 
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     *
     * @param columnIndexes an array of column indexes indicating the columns
     *        that should be returned from the inserted row
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     *         or (2) 0 for SQL statements that return nothing
     *
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the SQL
     * statement returns a <code>ResultSet</code> object,the second argument
     * supplied to this method is not an
     * <code>int</code> array whose elements are valid column indexes, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @since 1.4
     */
    int executeUpdate(String sql, int columnIndexes[]) throws SQLException;

    /**
     * Executes the given SQL statement and signals the driver that the
     * auto-generated keys indicated in the given array should be made available
     * for retrieval.   This array contains the names of the columns in the
     * target table that contain the auto-generated keys that should be made
     * available. The driver will ignore the array if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     *<p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     * 执行给定的SQL语句,并通知驱动程序给定数组中指示的自动生成的键应该可用于检索。此数组包含目标表中包含应该可用的自动生成的键的列的名称。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该数组。
     * p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * 
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     * @param columnNames an array of the names of the columns that should be
     *        returned from the inserted row
     * @return either the row count for <code>INSERT</code>, <code>UPDATE</code>,
     *         or <code>DELETE</code> statements, or 0 for SQL statements
     *         that return nothing
     * @exception SQLException if a database access error occurs,
     *  this method is called on a closed <code>Statement</code>, the SQL
     *            statement returns a <code>ResultSet</code> object, the
     *            second argument supplied to this method is not a <code>String</code> array
     *            whose elements are valid column names, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @since 1.4
     */
    int executeUpdate(String sql, String columnNames[]) throws SQLException;

    /**
     * Executes the given SQL statement, which may return multiple results,
     * and signals the driver that any
     * auto-generated keys should be made available
     * for retrieval.  The driver will ignore this signal if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     * <P>
     * In some (uncommon) situations, a single SQL statement may return
     * multiple result sets and/or update counts.  Normally you can ignore
     * this unless you are (1) executing a stored procedure that you know may
     * return multiple results or (2) you are dynamically executing an
     * unknown SQL string.
     * <P>
     * The <code>execute</code> method executes an SQL statement and indicates the
     * form of the first result.  You must then use the methods
     * <code>getResultSet</code> or <code>getUpdateCount</code>
     * to retrieve the result, and <code>getMoreResults</code> to
     * move to any subsequent result(s).
     *<p>
     *<strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     *  执行给定的SQL语句,它可能返回多个结果,并通知驱动程序任何自动生成的键应该可用于检索。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略此信号。
     * <P>
     *  在一些(不常见的)情况下,单个SQL语句可能返回多个结果集和/或更新计数。通常,您可以忽略此操作,除非您(1)执行一个您知道可能返回多个结果的存储过程,或(2)您正在动态执行未知的SQL字符串。
     * <P>
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * 然后必须使用方法<code> getResultSet </code>或<code> getUpdateCount </code>检索结果,并使用<code> getMoreResults </code>
     * 移动到任何后续结果。
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * p>
     *  strong>注意</strong>：此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>上调用。
     * 
     * 
     * @param sql any SQL statement
     * @param autoGeneratedKeys a constant indicating whether auto-generated
     *        keys should be made available for retrieval using the method
     *        <code>getGeneratedKeys</code>; one of the following constants:
     *        <code>Statement.RETURN_GENERATED_KEYS</code> or
     *        <code>Statement.NO_GENERATED_KEYS</code>
     * @return <code>true</code> if the first result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there are
     *         no results
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the second
     *         parameter supplied to this method is not
     *         <code>Statement.RETURN_GENERATED_KEYS</code> or
     *         <code>Statement.NO_GENERATED_KEYS</code>,
     * the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method with a constant of Statement.RETURN_GENERATED_KEYS
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @see #getResultSet
     * @see #getUpdateCount
     * @see #getMoreResults
     * @see #getGeneratedKeys
     *
     * @since 1.4
     */
    boolean execute(String sql, int autoGeneratedKeys) throws SQLException;

    /**
     * Executes the given SQL statement, which may return multiple results,
     * and signals the driver that the
     * auto-generated keys indicated in the given array should be made available
     * for retrieval.  This array contains the indexes of the columns in the
     * target table that contain the auto-generated keys that should be made
     * available.  The driver will ignore the array if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     * <P>
     * Under some (uncommon) situations, a single SQL statement may return
     * multiple result sets and/or update counts.  Normally you can ignore
     * this unless you are (1) executing a stored procedure that you know may
     * return multiple results or (2) you are dynamically executing an
     * unknown SQL string.
     * <P>
     * The <code>execute</code> method executes an SQL statement and indicates the
     * form of the first result.  You must then use the methods
     * <code>getResultSet</code> or <code>getUpdateCount</code>
     * to retrieve the result, and <code>getMoreResults</code> to
     * move to any subsequent result(s).
     *<p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     *  执行给定的SQL语句,它可能返回多个结果,并通知驱动程序给定数组中指示的自动生成的键应该可用于检索。此数组包含目标表中包含应该可用的自动生成的键的列的索引。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该数组。
     * <P>
     *  在一些(不常见的)情况下,单个SQL语句可能返回多个结果集和/或更新计数。通常,您可以忽略此操作,除非您(1)执行一个您知道可能返回多个结果的存储过程,或(2)您正在动态执行未知的SQL字符串。
     * <P>
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * 然后必须使用方法<code> getResultSet </code>或<code> getUpdateCount </code>检索结果,并使用<code> getMoreResults </code>
     * 移动到任何后续结果。
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * 
     * 
     * @param sql any SQL statement
     * @param columnIndexes an array of the indexes of the columns in the
     *        inserted row that should be  made available for retrieval by a
     *        call to the method <code>getGeneratedKeys</code>
     * @return <code>true</code> if the first result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there
     *         are no results
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the
     *            elements in the <code>int</code> array passed to this method
     *            are not valid column indexes, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @see #getResultSet
     * @see #getUpdateCount
     * @see #getMoreResults
     *
     * @since 1.4
     */
    boolean execute(String sql, int columnIndexes[]) throws SQLException;

    /**
     * Executes the given SQL statement, which may return multiple results,
     * and signals the driver that the
     * auto-generated keys indicated in the given array should be made available
     * for retrieval. This array contains the names of the columns in the
     * target table that contain the auto-generated keys that should be made
     * available.  The driver will ignore the array if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     * <P>
     * In some (uncommon) situations, a single SQL statement may return
     * multiple result sets and/or update counts.  Normally you can ignore
     * this unless you are (1) executing a stored procedure that you know may
     * return multiple results or (2) you are dynamically executing an
     * unknown SQL string.
     * <P>
     * The <code>execute</code> method executes an SQL statement and indicates the
     * form of the first result.  You must then use the methods
     * <code>getResultSet</code> or <code>getUpdateCount</code>
     * to retrieve the result, and <code>getMoreResults</code> to
     * move to any subsequent result(s).
     *<p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     * <p>
     *  执行给定的SQL语句,它可能返回多个结果,并通知驱动程序给定数组中指示的自动生成的键应该可用于检索。此数组包含目标表中包含应该可用的自动生成的键的列的名称。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该数组。
     * <P>
     *  在一些(不常见的)情况下,单个SQL语句可能返回多个结果集和/或更新计数。通常,您可以忽略此操作,除非您(1)执行一个您知道可能返回多个结果的存储过程,或(2)您正在动态执行未知的SQL字符串。
     * <P>
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * 然后必须使用方法<code> getResultSet </code>或<code> getUpdateCount </code>检索结果,并使用<code> getMoreResults </code>
     * 移动到任何后续结果。
     * <code> execute </code>方法执行SQL语句并指示第一个结果的格式。
     * p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * 
     * 
     * @param sql any SQL statement
     * @param columnNames an array of the names of the columns in the inserted
     *        row that should be made available for retrieval by a call to the
     *        method <code>getGeneratedKeys</code>
     * @return <code>true</code> if the next result is a <code>ResultSet</code>
     *         object; <code>false</code> if it is an update count or there
     *         are no more results
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>,the
     *          elements of the <code>String</code> array passed to this
     *          method are not valid column names, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @see #getResultSet
     * @see #getUpdateCount
     * @see #getMoreResults
     * @see #getGeneratedKeys
     *
     * @since 1.4
     */
    boolean execute(String sql, String columnNames[]) throws SQLException;

   /**
     * Retrieves the result set holdability for <code>ResultSet</code> objects
     * generated by this <code>Statement</code> object.
     *
     * <p>
     *  检索由此<code> Statement </code>对象生成的<code> ResultSet </code>对象的结果集保持性。
     * 
     * 
     * @return either <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or
     *         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     *
     * @since 1.4
     */
    int getResultSetHoldability() throws SQLException;

    /**
     * Retrieves whether this <code>Statement</code> object has been closed. A <code>Statement</code> is closed if the
     * method close has been called on it, or if it is automatically closed.
     * <p>
     *  检索此<...> Statement </code>对象是否已关闭。如果方法close已经被调用,或者它被自动关闭,那么<code> Statement </code>被关闭。
     * 
     * 
     * @return true if this <code>Statement</code> object is closed; false if it is still open
     * @throws SQLException if a database access error occurs
     * @since 1.6
     */
    boolean isClosed() throws SQLException;

        /**
         * Requests that a <code>Statement</code> be pooled or not pooled.  The value
         * specified is a hint to the statement pool implementation indicating
         * whether the application wants the statement to be pooled.  It is up to
         * the statement pool manager as to whether the hint is used.
         * <p>
         * The poolable value of a statement is applicable to both internal
         * statement caches implemented by the driver and external statement caches
         * implemented by application servers and other applications.
         * <p>
         * By default, a <code>Statement</code> is not poolable when created, and
         * a <code>PreparedStatement</code> and <code>CallableStatement</code>
         * are poolable when created.
         * <p>
         * <p>
         *  请求<code>语句</code>被合并或不合并。指定的值是对语句池实现的提示,指示应用程序是否希望该语句被合并。关于是否使用提示取决于语句池管理器。
         * <p>
         *  语句的poolable值适用于由驱动程序实现的内部语句高速缓存和由应用程序服务器和其他应用程序实现的外部语句高速缓存。
         * <p>
         *  默认情况下,<code> Statement </code>在创建时不可池化,并且<code> PreparedStatement </code>和<code> CallableStatement </code>
         * 。
         * <p>
         * 
         * @param poolable              requests that the statement be pooled if true and
         *                                              that the statement not be pooled if false
         * <p>
         * @throws SQLException if this method is called on a closed
         * <code>Statement</code>
         * <p>
         * @since 1.6
         */
        void setPoolable(boolean poolable)
                throws SQLException;

        /**
         * Returns a  value indicating whether the <code>Statement</code>
         * is poolable or not.
         * <p>
         * <p>
         *  返回一个值,指示<code> Statement </code>是否可以池化。
         * <p>
         * 
         * @return              <code>true</code> if the <code>Statement</code>
         * is poolable; <code>false</code> otherwise
         * <p>
         * @throws SQLException if this method is called on a closed
         * <code>Statement</code>
         * <p>
         * @since 1.6
         * <p>
         * @see java.sql.Statement#setPoolable(boolean) setPoolable(boolean)
         */
        boolean isPoolable()
                throws SQLException;

    //--------------------------JDBC 4.1 -----------------------------

    /**
     * Specifies that this {@code Statement} will be closed when all its
     * dependent result sets are closed. If execution of the {@code Statement}
     * does not produce any result sets, this method has no effect.
     * <p>
     * <strong>Note:</strong> Multiple calls to {@code closeOnCompletion} do
     * not toggle the effect on this {@code Statement}. However, a call to
     * {@code closeOnCompletion} does effect both the subsequent execution of
     * statements, and statements that currently have open, dependent,
     * result sets.
     *
     * <p>
     * 指定此{@code Statement}将在其所有相关结果集都关闭时关闭。如果{@code Statement}的执行不产生任何结果集,则此方法不起作用。
     * <p>
     *  <strong>注意：</strong>对{@code closeOnCompletion}的多次调用不会切换对此{@code Statement}的效果。
     * 但是,对{@code closeOnCompletion}的调用会影响语句的后续执行,以及当前具有打开,从属,结果集的语句。
     * 
     * 
     * @throws SQLException if this method is called on a closed
     * {@code Statement}
     * @since 1.7
     */
    public void closeOnCompletion() throws SQLException;

    /**
     * Returns a value indicating whether this {@code Statement} will be
     * closed when all its dependent result sets are closed.
     * <p>
     *  返回一个值,指示{@code Statement}在其所有相关结果集都关闭时是否关闭。
     * 
     * 
     * @return {@code true} if the {@code Statement} will be closed when all
     * of its dependent result sets are closed; {@code false} otherwise
     * @throws SQLException if this method is called on a closed
     * {@code Statement}
     * @since 1.7
     */
    public boolean isCloseOnCompletion() throws SQLException;


    //--------------------------JDBC 4.2 -----------------------------

    /**
     *  Retrieves the current result as an update count; if the result
     * is a <code>ResultSet</code> object or there are no more results, -1
     *  is returned. This method should be called only once per result.
     * <p>
     * This method should be used when the returned row count may exceed
     * {@link Integer#MAX_VALUE}.
     *<p>
     * The default implementation will throw {@code UnsupportedOperationException}
     *
     * <p>
     *  检索当前结果作为更新计数;如果结果是一个<code> ResultSet </code>对象或没有更多的结果,则返回-1。每个结果只应调用此方法一次。
     * <p>
     *  当返回的行数可能超过{@link Integer#MAX_VALUE}时,应使用此方法。
     * p>
     *  默认实现将抛出{@code UnsupportedOperationException}
     * 
     * 
     * @return the current result as an update count; -1 if the current result
     * is a <code>ResultSet</code> object or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     * @since 1.8
     */
    default long getLargeUpdateCount() throws SQLException {
        throw new UnsupportedOperationException("getLargeUpdateCount not implemented");
    }

    /**
     * Sets the limit for the maximum number of rows that any
     * <code>ResultSet</code> object  generated by this <code>Statement</code>
     * object can contain to the given number.
     * If the limit is exceeded, the excess
     * rows are silently dropped.
     * <p>
     * This method should be used when the row limit may exceed
     * {@link Integer#MAX_VALUE}.
     *<p>
     * The default implementation will throw {@code UnsupportedOperationException}
     *
     * <p>
     *  设置<code> Statement </code>对象生成的任何<code> ResultSet </code>对象可以包含给定数字的最大行数限制。如果超过限制,则超出的行将被静默删除。
     * <p>
     *  当行限制可能超过{@link整数#MAX_VALUE}时,应使用此方法。
     * p>
     *  默认实现将抛出{@code UnsupportedOperationException}
     * 
     * 
     * @param max the new max rows limit; zero means there is no limit
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>
     *            or the condition {@code max >= 0} is not satisfied
     * @see #getMaxRows
     * @since 1.8
     */
    default void setLargeMaxRows(long max) throws SQLException {
        throw new UnsupportedOperationException("setLargeMaxRows not implemented");
    }

    /**
     * Retrieves the maximum number of rows that a
     * <code>ResultSet</code> object produced by this
     * <code>Statement</code> object can contain.  If this limit is exceeded,
     * the excess rows are silently dropped.
     * <p>
     * This method should be used when the returned row limit may exceed
     * {@link Integer#MAX_VALUE}.
     *<p>
     * The default implementation will return {@code 0}
     *
     * <p>
     * 检索由此<code> Statement </code>对象生成的<code> ResultSet </code>对象可以包含的最大行数。如果超出此限制,则将静默删除多余的行。
     * <p>
     *  当返回的行限制可能超过{@link Integer#MAX_VALUE}时,应使用此方法。
     * p>
     *  默认实现将返回{@code 0}
     * 
     * 
     * @return the current maximum number of rows for a <code>ResultSet</code>
     *         object produced by this <code>Statement</code> object;
     *         zero means there is no limit
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #setMaxRows
     * @since 1.8
     */
    default long getLargeMaxRows() throws SQLException {
        return 0;
    }

    /**
     * Submits a batch of commands to the database for execution and
     * if all commands execute successfully, returns an array of update counts.
     * The <code>long</code> elements of the array that is returned are ordered
     * to correspond to the commands in the batch, which are ordered
     * according to the order in which they were added to the batch.
     * The elements in the array returned by the method {@code executeLargeBatch}
     * may be one of the following:
     * <OL>
     * <LI>A number greater than or equal to zero -- indicates that the
     * command was processed successfully and is an update count giving the
     * number of rows in the database that were affected by the command's
     * execution
     * <LI>A value of <code>SUCCESS_NO_INFO</code> -- indicates that the command was
     * processed successfully but that the number of rows affected is
     * unknown
     * <P>
     * If one of the commands in a batch update fails to execute properly,
     * this method throws a <code>BatchUpdateException</code>, and a JDBC
     * driver may or may not continue to process the remaining commands in
     * the batch.  However, the driver's behavior must be consistent with a
     * particular DBMS, either always continuing to process commands or never
     * continuing to process commands.  If the driver continues processing
     * after a failure, the array returned by the method
     * <code>BatchUpdateException.getLargeUpdateCounts</code>
     * will contain as many elements as there are commands in the batch, and
     * at least one of the elements will be the following:
     *
     * <LI>A value of <code>EXECUTE_FAILED</code> -- indicates that the command failed
     * to execute successfully and occurs only if a driver continues to
     * process commands after a command fails
     * </OL>
     * <p>
     * This method should be used when the returned row count may exceed
     * {@link Integer#MAX_VALUE}.
     *<p>
     * The default implementation will throw {@code UnsupportedOperationException}
     *
     * <p>
     *  将一批命令提交到数据库以供执行,如果所有命令成功执行,则返回更新计数的数组。
     * 返回的数组的<code> long </code>元素被排序为对应于批处理中的命令,这些命令根据它们添加到批处理的顺序排序。
     * 由{@code executeLargeBatch}方法返回的数组中的元素可能是以下之一：。
     * <OL>
     *  <LI>大于或等于零的数字表示命令已成功处理,是一个更新计数,提供数据库中受命令执行影响的行数<LI> <code> SUCCESS_NO_INFO的值</code>  - 表示命令已成功处理,但受影
     * 响的行数未知。
     * <P>
     * 如果批处理更新中的某个命令无法正常执行,此方法会抛出<code> BatchUpdateException </code>,并且JDBC驱动程序可能也可能不会继续处理批处理中的其余命令。
     * 然而,驱动程序的行为必须与特定的DBMS一致,总是继续处理命令或从不继续处理命令。
     * 如果驱动程序在故障后继续处理,则由方法<code> BatchUpdateException.getLargeUpdateCounts </code>返回的数组将包含与批处理中的命令一样多的元素,并且至
     * 少有一个元素如下：。
     * 然而,驱动程序的行为必须与特定的DBMS一致,总是继续处理命令或从不继续处理命令。
     * 
     *  <LI> <code> EXECUTE_FAILED </code>的值表示该命令无法成功执行,并且仅在驱动程序在命令失败后继续处理命令时发生
     * </OL>
     * <p>
     *  当返回的行数可能超过{@link Integer#MAX_VALUE}时,应使用此方法。
     * p>
     *  默认实现将抛出{@code UnsupportedOperationException}
     * 
     * 
     * @return an array of update counts containing one element for each
     * command in the batch.  The elements of the array are ordered according
     * to the order in which commands were added to the batch.
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code> or the
     * driver does not support batch statements. Throws {@link BatchUpdateException}
     * (a subclass of <code>SQLException</code>) if one of the commands sent to the
     * database fails to execute properly or attempts to return a result set.
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     *
     * @see #addBatch
     * @see DatabaseMetaData#supportsBatchUpdates
     * @since 1.8
     */
    default long[] executeLargeBatch() throws SQLException {
        throw new UnsupportedOperationException("executeLargeBatch not implemented");
    }

    /**
     * Executes the given SQL statement, which may be an <code>INSERT</code>,
     * <code>UPDATE</code>, or <code>DELETE</code> statement or an
     * SQL statement that returns nothing, such as an SQL DDL statement.
     * <p>
     * This method should be used when the returned row count may exceed
     * {@link Integer#MAX_VALUE}.
     * <p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     *<p>
     * The default implementation will throw {@code UnsupportedOperationException}
     *
     * <p>
     *  执行给定的SQL语句,可以是<code> INSERT </code>,<code> UPDATE </code>或<code> DELETE </code>语句或不返回任何内容的SQL语句, DDL
     * 语句。
     * <p>
     *  当返回的行数可能超过{@link Integer#MAX_VALUE}时,应使用此方法。
     * <p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * p>
     *  默认实现将抛出{@code UnsupportedOperationException}
     * 
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement,
     * such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     *
     * @return either (1) the row count for SQL Data Manipulation Language
     * (DML) statements or (2) 0 for SQL statements that return nothing
     *
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the given
     * SQL statement produces a <code>ResultSet</code> object, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @since 1.8
     */
    default long executeLargeUpdate(String sql) throws SQLException {
        throw new UnsupportedOperationException("executeLargeUpdate not implemented");
    }

    /**
     * Executes the given SQL statement and signals the driver with the
     * given flag about whether the
     * auto-generated keys produced by this <code>Statement</code> object
     * should be made available for retrieval.  The driver will ignore the
     * flag if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     * <p>
     * This method should be used when the returned row count may exceed
     * {@link Integer#MAX_VALUE}.
     * <p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     *<p>
     * The default implementation will throw {@code SQLFeatureNotSupportedException}
     *
     * <p>
     * 执行给定的SQL语句,并用给定标志向驱动程序发出信号,告知该<code> Statement </code>对象生成的自动生成的键是否应该可用于检索。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该标志。
     * <p>
     *  当返回的行数可能超过{@link Integer#MAX_VALUE}时,应使用此方法。
     * <p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * p>
     *  默认实现将抛出{@code SQLFeatureNotSupportedException}
     * 
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement,
     * such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     *
     * @param autoGeneratedKeys a flag indicating whether auto-generated keys
     *        should be made available for retrieval;
     *         one of the following constants:
     *         <code>Statement.RETURN_GENERATED_KEYS</code>
     *         <code>Statement.NO_GENERATED_KEYS</code>
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     *         or (2) 0 for SQL statements that return nothing
     *
     * @exception SQLException if a database access error occurs,
     *  this method is called on a closed <code>Statement</code>, the given
     *            SQL statement returns a <code>ResultSet</code> object,
     *            the given constant is not one of those allowed, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support
     * this method with a constant of Statement.RETURN_GENERATED_KEYS
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @since 1.8
     */
    default long executeLargeUpdate(String sql, int autoGeneratedKeys)
            throws SQLException {
        throw new SQLFeatureNotSupportedException("executeLargeUpdate not implemented");
    }

    /**
     * Executes the given SQL statement and signals the driver that the
     * auto-generated keys indicated in the given array should be made available
     * for retrieval.   This array contains the indexes of the columns in the
     * target table that contain the auto-generated keys that should be made
     * available. The driver will ignore the array if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     * <p>
     * This method should be used when the returned row count may exceed
     * {@link Integer#MAX_VALUE}.
     * <p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     *<p>
     * The default implementation will throw {@code SQLFeatureNotSupportedException}
     *
     * <p>
     *  执行给定的SQL语句,并通知驱动程序给定数组中指示的自动生成的键应该可用于检索。此数组包含目标表中包含应该可用的自动生成的键的列的索引。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该数组。
     * <p>
     *  当返回的行数可能超过{@link Integer#MAX_VALUE}时,应使用此方法。
     * <p>
     *  <strong>注意：</strong>此方法无法在<code> PreparedStatement </code>或<code> CallableStatement </code>中调用。
     * p>
     *  默认实现将抛出{@code SQLFeatureNotSupportedException}
     * 
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement,
     * such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     *
     * @param columnIndexes an array of column indexes indicating the columns
     *        that should be returned from the inserted row
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     *         or (2) 0 for SQL statements that return nothing
     *
     * @exception SQLException if a database access error occurs,
     * this method is called on a closed <code>Statement</code>, the SQL
     * statement returns a <code>ResultSet</code> object,the second argument
     * supplied to this method is not an
     * <code>int</code> array whose elements are valid column indexes, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @since 1.8
     */
    default long executeLargeUpdate(String sql, int columnIndexes[]) throws SQLException {
        throw new SQLFeatureNotSupportedException("executeLargeUpdate not implemented");
    }

    /**
     * Executes the given SQL statement and signals the driver that the
     * auto-generated keys indicated in the given array should be made available
     * for retrieval.   This array contains the names of the columns in the
     * target table that contain the auto-generated keys that should be made
     * available. The driver will ignore the array if the SQL statement
     * is not an <code>INSERT</code> statement, or an SQL statement able to return
     * auto-generated keys (the list of such statements is vendor-specific).
     * <p>
     * This method should be used when the returned row count may exceed
     * {@link Integer#MAX_VALUE}.
     * <p>
     * <strong>Note:</strong>This method cannot be called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>.
     *<p>
     * The default implementation will throw {@code SQLFeatureNotSupportedException}
     *
     * <p>
     * 执行给定的SQL语句,并通知驱动程序给定数组中指示的自动生成的键应该可用于检索。此数组包含目标表中包含应该可用的自动生成的键的列的名称。
     * 如果SQL语句不是<code> INSERT </code>语句或能够返回自动生成的键的SQL语句(此类语句的列表是供应商特定的),则驱动程序将忽略该数组。
     * <p>
     *  当返回的行数可能超过{@link Integer#MAX_VALUE}时,应使用此方法。
     * <p>
     * 
     * @param sql an SQL Data Manipulation Language (DML) statement,
     * such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     * @param columnNames an array of the names of the columns that should be
     *        returned from the inserted row
     * @return either the row count for <code>INSERT</code>, <code>UPDATE</code>,
     *         or <code>DELETE</code> statements, or 0 for SQL statements
     *         that return nothing
     * @exception SQLException if a database access error occurs,
     *  this method is called on a closed <code>Statement</code>, the SQL
     *            statement returns a <code>ResultSet</code> object, the
     *            second argument supplied to this method is not a <code>String</code> array
     *            whose elements are valid column names, the method is called on a
     * <code>PreparedStatement</code> or <code>CallableStatement</code>
     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this method
     * @throws SQLTimeoutException when the driver has determined that the
     * timeout value that was specified by the {@code setQueryTimeout}
     * method has been exceeded and has at least attempted to cancel
     * the currently running {@code Statement}
     * @since 1.8
     */
    default long executeLargeUpdate(String sql, String columnNames[])
            throws SQLException {
        throw new SQLFeatureNotSupportedException("executeLargeUpdate not implemented");
    }
}
