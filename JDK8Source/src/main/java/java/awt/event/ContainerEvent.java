/***** Lobxxx Translate Finished ******/
/*
 * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

package java.awt.event;

import java.awt.Container;
import java.awt.Component;

/**
 * A low-level event which indicates that a container's contents
 * changed because a component was added or removed.
 * <P>
 * Container events are provided for notification purposes ONLY;
 * The AWT will automatically handle changes to the containers
 * contents internally so that the program works properly regardless of
 * whether the program is receiving these events or not.
 * <P>
 * This low-level event is generated by a container object (such as a
 * Panel) when a component is added to it or removed from it.
 * The event is passed to every <code>ContainerListener</code>
 * or <code>ContainerAdapter</code> object which registered to receive such
 * events using the component's <code>addContainerListener</code> method.
 * (<code>ContainerAdapter</code> objects implement the
 * <code>ContainerListener</code> interface.) Each such listener object
 * gets this <code>ContainerEvent</code> when the event occurs.
 * <p>
 * An unspecified behavior will be caused if the {@code id} parameter
 * of any particular {@code ContainerEvent} instance is not
 * in the range from {@code CONTAINER_FIRST} to {@code CONTAINER_LAST}.
 *
 * <p>
 *  表示由于添加或删除组件而导致容器内容更改的低级事件。
 * <P>
 *  集装箱事件仅用于通知目的; AWT将在内部自动处理对容器内容的改变,使得程序正确地工作,而不管程序是否正在接收这些事件。
 * <P>
 *  此低级事件由容器对象(例如Panel)在向其添加或删除组件时生成。
 * 事件传递到每个使用组件的<code> addContainerListener </code>方法注册接收此类事件的每个<code> ContainerListener </code>或<code> C
 * ontainerAdapter </code>对象。
 *  此低级事件由容器对象(例如Panel)在向其添加或删除组件时生成。
 *  (<code> ContainerAdapter </code>对象实现<code> ContainerListener </code>接口。
 * )当事件发生时,每个这样的监听器对象都会获得这个<code> ContainerEvent </code>。
 * <p>
 *  如果任何特定{@code ContainerEvent}实例的{@code id}参数不在{@code CONTAINER_FIRST}到{@code CONTAINER_LAST}的范围内,则会导致
 * 未指定的行为。
 * 
 * 
 * @see ContainerAdapter
 * @see ContainerListener
 * @see <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/containerlistener.html">Tutorial: Writing a Container Listener</a>
 *
 * @author Tim Prinzing
 * @author Amy Fowler
 * @since 1.1
 */
public class ContainerEvent extends ComponentEvent {

    /**
     * The first number in the range of ids used for container events.
     * <p>
     *  用于容器事件的ids范围中的第一个数字。
     * 
     */
    public static final int CONTAINER_FIRST             = 300;

    /**
     * The last number in the range of ids used for container events.
     * <p>
     *  用于容器事件的ids范围中的最后一个数字。
     * 
     */
    public static final int CONTAINER_LAST              = 301;

   /**
     * This event indicates that a component was added to the container.
     * <p>
     *  此事件表示已将某个组件添加到容器中。
     * 
     */
    public static final int COMPONENT_ADDED     = CONTAINER_FIRST;

    /**
     * This event indicates that a component was removed from the container.
     * <p>
     *  此事件表示组件已从容器中删除。
     * 
     */
    public static final int COMPONENT_REMOVED = 1 + CONTAINER_FIRST;

    /**
     * The non-null component that is being added or
     * removed from the Container.
     *
     * <p>
     * 正在从Container添加或删除的非空组件。
     * 
     * 
     * @serial
     * @see #getChild()
     */
    Component child;

    /*
     * JDK 1.1 serialVersionUID
     * <p>
     *  JDK 1.1 serialVersionUID
     * 
     */
    private static final long serialVersionUID = -4114942250539772041L;

    /**
     * Constructs a <code>ContainerEvent</code> object.
     * <p> This method throws an
     * <code>IllegalArgumentException</code> if <code>source</code>
     * is <code>null</code>.
     *
     * <p>
     *  构造一个<code> ContainerEvent </code>对象。
     *  <p>如果<code> source </code>是<code> null </code>,此方法会抛出<code> IllegalArgumentException </code>。
     * 
     * 
     * @param source The <code>Component</code> object (container)
     *               that originated the event
     * @param id     An integer indicating the type of event.
     *                     For information on allowable values, see
     *                     the class description for {@link ContainerEvent}
     * @param child  the component that was added or removed
     * @throws IllegalArgumentException if <code>source</code> is null
     * @see #getContainer()
     * @see #getID()
     * @see #getChild()
     */
    public ContainerEvent(Component source, int id, Component child) {
        super(source, id);
        this.child = child;
    }

    /**
     * Returns the originator of the event.
     *
     * <p>
     *  返回事件的发起者。
     * 
     * 
     * @return the <code>Container</code> object that originated
     * the event, or <code>null</code> if the object is not a
     * <code>Container</code>.
     */
    public Container getContainer() {
        return (source instanceof Container) ? (Container)source : null;
    }

    /**
     * Returns the component that was affected by the event.
     *
     * <p>
     *  返回受事件影响的组件。
     * 
     * 
     * @return the Component object that was added or removed
     */
    public Component getChild() {
        return child;
    }

    /**
     * Returns a parameter string identifying this event.
     * This method is useful for event-logging and for debugging.
     *
     * <p>
     *  返回标识此事件的参数字符串。此方法对事件记录和调试非常有用。
     * 
     * @return a string identifying the event and its attributes
     */
    public String paramString() {
        String typeStr;
        switch(id) {
          case COMPONENT_ADDED:
              typeStr = "COMPONENT_ADDED";
              break;
          case COMPONENT_REMOVED:
              typeStr = "COMPONENT_REMOVED";
              break;
          default:
              typeStr = "unknown type";
        }
        return typeStr + ",child="+child.getName();
    }
}
