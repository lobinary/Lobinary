package com.lobinary.设计模式.START模拟运行;

import com.lobinary.设计模式.命令模式.命令.命令;
import com.lobinary.设计模式.命令模式.命令.实现类.倒带命令;
import com.lobinary.设计模式.命令模式.命令.实现类.播放音乐命令;
import com.lobinary.设计模式.命令模式.命令.实现类.暂停音乐命令;
import com.lobinary.设计模式.命令模式.接收者.录音机;
import com.lobinary.设计模式.命令模式.请求者.录音机按钮;


/**
 * 命令模式
	命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。
	介绍
	意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。
	主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。
	何时使用：在某些场合，比如要对行为进行"记录、撤销/重做、事务"等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将"行为请求者"与"行为实现者"解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。
	如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。
	关键代码：
		定义三个角色：
			1、received 真正的命令执行对象 
			2、Command 
			3、invoker 使用命令对象的入口
	应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。
	优点： 
		1、降低了系统耦合度。 
		2、新的命令可以很容易添加到系统中去。
	缺点：使用命令模式可能会导致某些系统有过多的具体命令类。
	使用场景：
		认为是命令的地方都可以使用命令模式，比如： 
			1、GUI 中每一个按钮都是一条命令。 
			2、模拟 CMD。
	注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。
	
	
	*********************************************************************************
	命令模式的优点
	　　●　　更松散的耦合
	　　命令模式使得发起命令的对象——客户端，和具体实现命令的对象——接收者对象完全解耦，也就是说发起命令的对象完全不知道具体实现对象是谁，也不知道如何实现。
	　　●　　更动态的控制
	　　命令模式把请求封装起来，可以动态地对它进行参数化、队列化和日志化等操作，从而使得系统更灵活。
	　　●　　很自然的复合命令
	　　命令模式中的命令对象能够很容易地组合成复合命令，也就是宏命令，从而使系统操作更简单，功能更强大。
	　　●　　更好的扩展性
	　　由于发起命令的对象和具体的实现完全解耦，因此扩展新的命令就很容易，只需要实现新的命令对象，然后在装配的时候，把具体的实现对象设置到命令对象中，然后就可以使用这个命令对象，已有的实现完全不用变化。


	--------------------------------------------------------------------------------------
	小女孩茱丽(Julia)有一个盒式录音机，此录音机有播音(Play)、倒带(Rewind)和停止(Stop)功能，
	录音机的键盘便是请求者(Invoker)角色；茱丽(Julia)是客户端角色，而录音机便是接收者角色。
	Command类扮演抽象命令角色，而PlayCommand、StopCommand和RewindCommand便是具体命令类。
	茱丽(Julia)不需要知道播音(play)、倒带(rewind)和停止(stop)功能是怎么具体执行的，
	这些命令执行的细节全都由键盘(Keypad)具体实施。茱丽(Julia)只需要在键盘上按下相应的键便可以了。
　　	
	录音机是典型的命令模式。录音机按键把客户端与录音机的操作细节分割开来。

 */
public class 命令模式 {

	/**
	 * 个人理解：
	 * 
	 * 		命令模式具体适合一些特定执行步骤的开发方案，比如：日终时需要执行许多方案，对账时需要执行许多步骤
	 * 		将具体的每一个步骤设计成一个命令，这样方便以后组合，也方便新增，解耦各步骤之间的关联
	 * 		但是命令模式的各命令之间没有任何关联，所以对于一些步骤之间需要协调作用的方案，不太适用
	 * 
	 */
	public static void main(String[] args) {
		录音机 命令接受者录音机 = new 录音机();
		
		命令 播放音乐 = new 播放音乐命令(命令接受者录音机);
		命令 暂停音乐 = new 暂停音乐命令(命令接受者录音机);
		命令 倒带 = new 倒带命令(命令接受者录音机);
		
		录音机按钮 命令请求者录音机按钮 = new 录音机按钮();
		命令请求者录音机按钮.set播放音乐(播放音乐);
		命令请求者录音机按钮.set暂停音乐(暂停音乐);
		命令请求者录音机按钮.set倒带(倒带);

		命令请求者录音机按钮.按下播放音乐按钮();
		命令请求者录音机按钮.按下暂停音乐按钮();
		命令请求者录音机按钮.按下倒带按钮();
		
	}
	
}
