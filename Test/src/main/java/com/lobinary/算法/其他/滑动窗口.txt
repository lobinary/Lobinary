滑动窗口算法  

2014-07-02 10:22:20|  分类： tcp/ip |  标签：tcp/ip   |举报|字号 订阅
    
  下载LOFTER我的照片书  |
(转)

首先，我们得知道停等协议，因为滑动窗口算法是停等协议的改进，也可以说停等协议是滑动窗口算法的一种特殊情况。

停等协议：比如A要向B发送5个帧
1：A先发送帧1，然后A处于等待状态。
2：经过一些延时后，B接收到帧1，然后B发送一个确认信号给A，告诉它我已经收到了。
3：经过一些延时后，若A收到B发的信号，那说明帧1发送成功，A转而进入帧2的发送过程；若A经过一定的时间后还是没收到B发送的信号，则A认为帧1发送失败，重新发送帧1给B(即跳转到步骤1)。
4：A发送帧2，然后A处于等待状态。
。。。

这样看来，停等协议是有缺点的。当A发送了帧1以后它一直在等待是不是？这样网络链路不是空闲着吗？

滑动窗口算法就是用来解决这个问题的，为了提高效率，滑动窗口就此诞生

滑动窗口协议(A还是要发给B5个帧，假设A和B实现约定好窗口大小为3)：
1：A发送帧1，发完帧1后并不等待帧1已经发送成功的信号就发送帧2，发完帧2后就发送帧3，此时才进入等待状态(因为窗口是3，满了)。
2：经过一些延时后，B接收到帧1，然后B发送给A“已收到帧1的信号”，然后B又接收到帧2，然后B发送给A“已收到帧2的信号”，然后是帧3。。。
3：经过一些延时后，若A先收到了“B收到帧1的信号”，再收到“B收到帧2的信号”，再收到“B收到帧3的信号”，那说明第一个窗口发送成功，A转而进入下一个窗口的发送过程中(即跳转到步骤4)；若这3个信号中有一个帧没发成功，该帧及其后所有发过的帧都要重发。比如说发送的序号是3,4,5,6,7,如果4没成功 ，则4,5,6,7都要重发。并不是窗口中所有帖都要重发！)。
4：A发送帧4，发完帧4后发送帧5，然后进入等待状态。
。。。

相比之下，你有没有发现，滑动窗口算法中A等待的时间要比停等协议中要少？ A在等待3个B给的收到的信号的时间要少一点，因为它发送了3个帧之后才开始等，而不是发了1个帧就开始等了。

那么小高你可能要问了，既然滑动窗口算法比停等协议好，那为啥弄出个停等协议？其实是这样的，也没有好差的，要是帧发丢的概率很高，那么滑动窗口还不如停等呢。你想，1个帧发送成功的概率高还是3个帧都发送成功的概率高？显然是前者高是不是啊？而滑动窗口协议中只要有1个帧没发成功，那么这个帧和该帧之后的所有帧都要重发的（幸好重发的帧的个数不会超过窗口的大小）。

还有，其实停等协议就是窗口大小为1的滑动窗口算法，你看是不是？

所以应该根据现实的网络的好差，动态的调整窗口的大小，做到效率最高，重发的次数尽量小。
当网络好的时候，也就是帧发丢的概率很低的时候我们可以适当地增大窗口的大小，这样，反正一个窗口里面丢1个帧的概率都很小，我们何不让窗口大一点，让A等的时间更少一点？
当网络比较差的时候，也就是很容易发丢帧的时候，我们可以适当地减少窗口的大小，这样一来，我们尽量避免了老是要重发一个窗口的帧的尴尬情况，也就是小口小口地吃，慢慢来。宁愿让网络的利用率稍微少一点。

书才看了一点，也不知道说得对不对，大概就有说错的地方，请多指教，补充。

不知道够不够通俗易懂  ^_^

 

“而滑动窗口协议中只要有1个帧没发成功，这个窗口中的所有帧都要重发的。”
这句话是有问题的。应该是若有一个帖没发成功，该帧及其后所有发过的帧都要重发。
比如说发送的序号是3,4,5,6,7,如果4没成功 ，则4,5,6,7都要重发。并不是窗口中所有帖都要重发！