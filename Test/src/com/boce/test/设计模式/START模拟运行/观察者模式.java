package com.boce.test.设计模式.START模拟运行;

import com.boce.test.设计模式.观察者模式.变动类;
import com.boce.test.设计模式.观察者模式.观察者.实现类.二进制观察者;
import com.boce.test.设计模式.观察者模式.观察者.实现类.十进制观察者;


/**
 * 观察者模式
	当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。
	介绍
	意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
	主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。
	何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。
	如何解决：使用面向对象技术，可以将这种依赖关系弱化。
	关键代码：在抽象类里有一个 ArrayList 存放观察者们。
	应用实例： 
		1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 
		2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。
	优点： 
		1、观察者和被观察者是抽象耦合的。 
		2、建立一套触发机制。
	缺点： 
		1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 
		2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 
		3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。
	使用场景： 
		1、有多个子类共有的方法，且逻辑相同。 
		2、重要的、复杂的方法，可以考虑作为模板方法。
	注意事项： 
		1、JAVA 中已经有了对观察者模式的支持类。 
		2、避免循环引用。 
		3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。
 */
public class 观察者模式 {

	/**
	 * 个人理解：
	 * 		
	 * 		观察者模式理念就是：一个类变动后想告诉其他类我变了，那么第一个想法就是这个变动通知类里包含所有想要通知的类，那么就放一个List，里边是想要通知的类即可
	 * 
	 * 		下边的例子是另一种，就是当new被通知类对象时，在构造方法上就要求必须注册到变动类上
	 */
	public static void main(String[] args) {
		变动类 变动类 = new 变动类();
		
		变动类.set变动属性(8);
		System.out.println("=================================");

		十进制观察者 十进制观察者 = new 十进制观察者(变动类);
		二进制观察者 二进制观察者 = new 二进制观察者(变动类);
		
		变动类.set变动属性(8);
		
	}
	
}
