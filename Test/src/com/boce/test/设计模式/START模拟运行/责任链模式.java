package com.boce.test.设计模式.START模拟运行;

import com.boce.test.设计模式.责任链模式.日志输出器.日志输出器;
import com.boce.test.设计模式.责任链模式.日志输出器.实现类.Console日志输出器;
import com.boce.test.设计模式.责任链模式.日志输出器.实现类.数据库日志输出器;
import com.boce.test.设计模式.责任链模式.日志输出器.实现类.文件日志输出器;
import com.boce.test.设计模式.责任链模式.食品加工.包装;
import com.boce.test.设计模式.责任链模式.食品加工.实现类.塑料盒;
import com.boce.test.设计模式.责任链模式.食品加工.实现类.袋子;
import com.boce.test.设计模式.责任链模式.食品加工.实现类.饼干;


/**
 * 责任链模式
	顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。
	在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。
	介绍
	意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。
	主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。
	何时使用：在处理消息的时候以过滤很多道。
	如何解决：拦截的类都实现统一接口。
	关键代码：Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。
	应用实例：
		1、红楼梦中的"击鼓传花"。 
		2、JS 中的事件冒泡。 
		3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。
	优点： 
		1、降低耦合度。它将请求的发送者和接收者解耦。 
		2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。
	缺点： 
		1、不能保证请求一定被接收。 
		2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 
		3、可能不容易观察运行时的特征，有碍于除错。
	使用场景： 
		1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 
		2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 
		3、可动态指定一组对象处理请求。
	注意事项：在 JAVA WEB 中遇到很多应用。
 */
public class 责任链模式 {

	/**
	 * 个人理解：
	 * 		责任链的最典型例子就是filter，所以一想责任链只想到filter，写日志这个的时候感觉略有混乱，捋了半天才有头绪
	 * 
	 * 		责任链一般处理前后加工的业务，如自己发明的这个 饼干实例一样，使用责任链处理一些需要嵌套执行的业务逻辑还是非常合适的
	 * 
	 * 		暂时对于责任链模式还不太熟悉，只知道原理，暂时对于此类业务，多半由嵌套方法体执行，很难联想到使用责任链模式
	 * 		觉得，只有当这个嵌套比较容易变化的时候，才会启用责任链结构，也就是 执行的先后顺序会动态调整，或者拓展的时候，需要责任链
	 */
	public static void main(String[] args) {

		/** =================日志输出器实例=============================================================================================================*/
		
		System.out.println("=================日志输出器实例=============================================================================================================");
		日志输出器 Console日志输出器 = new Console日志输出器(日志输出器.ERROR);
		日志输出器 文件日志输出器 = new 文件日志输出器(日志输出器.DEBUG);
		日志输出器 数据库日志输出器 = new 数据库日志输出器(日志输出器.INFO);
		
		Console日志输出器.设置下一个日志输出器(文件日志输出器);
		文件日志输出器.设置下一个日志输出器(数据库日志输出器);

		Console日志输出器.输出日志(日志输出器.DEBUG, "这个是DEBUG级别的日志");
		System.out.println("============================================================");
		Console日志输出器.输出日志(日志输出器.INFO, "这个是INFO级别的日志");
		System.out.println("============================================================");
		Console日志输出器.输出日志(日志输出器.ERROR, "这个是ERROR级别的日志");
		

		System.out.println("============================================================");
		/** ==================饼干实例============================================================================================================*/

		System.out.println("==================饼干实例============================================================================================================");
		包装 袋子 = new 袋子();
		包装 塑料盒 = new 塑料盒();
		包装 饼干 = new 饼干();
		
		袋子.下一层包装 = 塑料盒;
		塑料盒.下一层包装 = 饼干;
		
		袋子.包装();
		
	}
	
	
	
}
