package com.boce.test.设计模式.START模拟运行;

import com.boce.test.设计模式.桥接模式.车.车;
import com.boce.test.设计模式.桥接模式.配套模式之工厂模式.车工厂;

/**
 * 	桥接模式
	桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。
	这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。
	我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。
	介绍
	意图：将抽象部分与实现部分分离，使它们都可以独立的变化。
	主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸①问题，扩展起来不灵活。
	何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。
	如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。
	关键代码：抽象类依赖实现类。
	应用实例： 
		1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 
		2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。
	优点： 
		1、抽象和实现的分离。 
		2、优秀的扩展能力。 
		3、实现细节对客户透明。
	缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。
	使用场景： 
		1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 
		2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 
		3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。
	注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。
	
	生活中的一个例子:
	    拿汽车在路上行驶的来说。既有小汽车又有公共汽车，它们都不但能在市区中的公路上行驶，也能在高速公路上行驶。这你会发现，对于交通工具（汽车）有不同的类型，
	    它们所行驶的环境（路）也有不同类型，在软件系统中就要适应两个方面（不同车型，不同道路）的变化，怎样实现才能应对这种变化呢？
	概述:
	在软件系统中，某些类型由于自身的逻辑，它具有两个或多个维度的变化，那么如何应对这种“多维度的变化”？如何利用面向对象的技术来使得该类型能够轻松的沿着多个方向进行变化，而又不引入额外的复杂度？这就要使用Bridge模式。
	意图:
	　　　将抽象部分与实现部分分离，使它们都可以独立的变化。
	                                                                    ——《设计模式》GOF 
	
	上面这些话我也没看懂。。太抽象了，但是一看代码你就明白是怎么回事了。
	
	①Java类爆炸	Java类爆炸是设计者对类的抽象粒度没能把握好，只要两个事务有所差别就用不同的类来设计，
				这样如果系统有很多业务，由于是所有程序人员共同开发的，不可避免就需要新建很多的类来处理，
				这样类的数量就会不断累积，直至工程文件过于庞大。
				
	参考文献：http://blog.csdn.net/jason0539/article/details/22568865
	
	提示：在应用时结合创建型设计模式来处理具体的问题。
	
	适用性：
	   在以下的情况下应当使用桥梁模式：
		1．如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的联系。 
		2．设计要求实现化角色的任何改变不应当影响客户端，或者说实现化角色的改变对客户端是完全透明的。
		3．一个构件有多于一个的抽象化角色和实现化角色，系统需要它们之间进行动态耦合。 
		4．虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。
	总结：
	    Bridge模式是一个非常有用的模式，也非常复杂，它很好的符合了开放-封闭原则和优先使用对象，而不是继承这两个面向对象原则。
 */
public class 桥接模式 {
	
	/**
	 * 个人理解：
	 * 		车和路都是变化的，这两个都是变化的话
	 * 			如果通过继承的话：假如车有4种，路有2种，那么车继承路，那么需要2*4=8个类完成需求
	 * 			但是现在通过桥接模式，也就是通过组合(类中包含类),那么就是 2 + 4 = 6个类 就可以完成
	 * 			有效防止了类爆炸
	 */
	public static void main(String[] args) throws Exception {
		
		车 小汽车乡间小路 = 车工厂.获取车(车工厂.种类.小汽车乡间小路);
		小汽车乡间小路.跑();
		
		车 小汽车高速公路 = 车工厂.获取车(车工厂.种类.小汽车高速公路);
		小汽车高速公路.跑();
		
		车 大卡车乡间小路 = 车工厂.获取车(车工厂.种类.大卡车乡间小路);
		大卡车乡间小路.跑();

		车 大卡车高速公路 = 车工厂.获取车(车工厂.种类.大卡车高速公路);
		大卡车高速公路.跑();
		
	}

}
