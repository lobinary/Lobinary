package com.lobinary.设计模式.START模拟运行;

import com.lobinary.设计模式.空对象模式.图书馆;
import com.lobinary.设计模式.空对象模式.图书.图书;


/**
 * 空对象模式
		在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。
	Null 对象不是检查空值，而是反应一个不做任何动作的关系。
	这样的 Null 对象也可以在数据不可用的时候提供默认的行为。
	
		在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，
	还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。
 */
public class 空对象模式 {
	
	/**
	 * 个人理解：
	 * 
	 * 		空对象模式使用相对较少，该模式是为了提高系统稳定性
	 * 		当系统仓库没有该对象时，一般情况下我们返回的是null，但是空对象模式返回的是一个自定义的对象，里边的方法体都已经被实现
	 * 		这样做的好处就是 ：	如果我们返回null，那么如果我们没有做空指针校验，那么有可能在调用对象属性或方法的时候出现空指针错误
	 * 					 	如果我们返回的是空对象，那么在未做校验情况下，可以继续执行，不会出现空指针错误，防止系统崩溃，以此来提高系统稳定性
	 */
	public static void main(String[] args) {
		
		图书 图书 = 图书馆.获取图书("吕斌漂流记");
		图书.展示内容();
		
		图书 图书2 = 图书馆.获取图书("射屌英雄传");
		图书2.展示内容();
		
		图书 图书3 = 图书馆.获取图书("天龙九步");
		图书3.展示内容();
	}
	
}
