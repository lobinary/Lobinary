package com.lobinary.源码.java;

public class 二进制 {

	public static void main(String[] args) {
		System.out.println("正数的原码、反码、补码完全相同");
		System.out.println("负数的反码为符号位不变，其他位取反");
		System.out.println("负数的补码为反码+1");
		System.out.println("按位取反：\t\t~2="+~2+"			2--》0010--》1101--》-3");
		System.out.println("按位与&：\t\t2&7="+(2&7)+"			两位都为1该位才为1 0010&0111=0010=2");
		System.out.println("按位或|：\t\t2|4="+(2|4)+"			有一个1就为1 0010&0100=0110=6");
		System.out.println("按位异或：\t\t2^3="+(2^3)+"			不相同则为1 0010&0011=0001=1");
		System.out.println("算数左移<<：\t2<<1="+(2<<1)+"			符号位不变，低位补0 0010 左移1位 0100");
		System.out.println("算数右移>>：\t2>>1="+(2>>1)+"			符号位不变，左补符号位，右溢出  0010 右移1位 0001=1");
		System.out.println("算数右移>>：\t-3>>1="+(-3>>1)+"			当负数时，运算的是补码，符号位不变，左补符号位，右溢出  -3=1011=反码=》1100=补码=》1101==》右移一位==》1110(此数为补码)=转换回来就是=减一=》1101=取反=》1010 = -2");
		System.out.println("逻辑左移<<<: \t5>>>1="+(5>>>1)+"			低位溢出，高位补0 0101==右移1位==》 0010=2");
		System.out.println("逻辑左移<<<: \t-5>>>1="+(-5>>>1)+"			低位溢出，高位补0 ");
		System.out.println("1000 0000 0000 0000 0000 0000 0000 0101(原码)");
		System.out.println("1111 1111 1111 1111 1111 1111 1111 1010(反码)");
		System.out.println("1111 1111 1111 1111 1111 1111 1111 1011(补码)");
		System.out.println("0111 1111 1111 1111 1111 1111 1111 1101(右移1位,补码)因为符号位已经是0，所以正数的原码、反码、补码相同");
		System.out.println("0111 1111 1111 1111 1111 1111 1111 1101(反码)因为符号位已经是0，所以正数的原码、反码、补码相同");
		System.out.println("0111 1111 1111 1111 1111 1111 1111 1101(原码)因为符号位已经是0，所以正数的原码、反码、补码相同");
		System.out.println("2147483645(十进制)");
	}

}
